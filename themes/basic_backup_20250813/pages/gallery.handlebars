<!-- Phase 5: Enhanced Gallery Page -->
<!-- Gallery Hero Section -->
{{#if gallery_content.gallery_header_visible}}
<section class="bg-basic-primary text-white py-16" data-aos="fade-in">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <h1 class="text-4xl md:text-5xl font-bold mb-6 basic-heading">
                {{#if gallery_content.page_title}}{{gallery_content.page_title}}{{else}}Photo Gallery{{/if}}
            </h1>
            {{#if gallery_content.page_subtitle}}
            <p class="text-xl md:text-2xl opacity-90 max-w-3xl mx-auto">
                {{gallery_content.page_subtitle}}
            </p>
            {{/if}}
        </div>
    </div>
</section>
{{/if}}

<!-- Phase 5: Advanced Gallery System -->
<section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

        {{#if (hasGalleries modelSlug)}}
            <!-- Professional Gallery Sections -->
            <div class="galleries-container" data-aos="fade-up">
                {{{renderGalleries modelSlug}}}
            </div>
        {{else}}
            <!-- Empty State -->
            <div class="text-center py-16">
                <div class="basic-card p-12 max-w-md mx-auto" data-aos="zoom-in">
                    <div class="w-20 h-20 mx-auto mb-6 bg-basic-primary rounded-full flex items-center justify-center">
                        <i class="fas fa-camera text-2xl text-white"></i>
                    </div>
                    <h3 class="text-2xl font-bold mb-4 basic-heading">Gallery Coming Soon</h3>
                    <p class="text-gray-600 mb-8 max-w-md mx-auto">
                        Professional photos will be available here soon. Check back for updates!
                    </p>
                    <a href="/{{modelSlug}}/contact" class="basic-btn">
                        Get in Touch
                    </a>
                </div>
            </div>
        {{/if}}
    </div>
</section>

<!-- Basic Theme Gallery Styling -->
<style>
.model-galleries .gallery-section {
    margin-bottom: 3rem;
    padding: 2rem 0;
    border-bottom: 1px solid #e5e7eb;
}

.model-galleries .gallery-section:last-child {
    border-bottom: none;
}

.model-galleries .gallery-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: var(--basic-primary, #2563eb);
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
}

.model-galleries .gallery-title::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background-color: var(--basic-primary, #2563eb);
    border-radius: 2px;
}

.model-galleries .grid-container {
    max-width: 100%;
}

.model-galleries .grid-item {
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.model-galleries .grid-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.15);
}

.model-galleries .masonry-item {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.model-galleries .masonry-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.15);
}

.model-galleries .carousel-inner {
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.model-galleries .lightbox-grid-container {
    background: #f9fafb;
    padding: 1rem;
    border-radius: 12px;
}

.model-galleries .lightbox-thumbnail {
    background: white;
    border: 2px solid #e5e7eb;
    transition: all 0.3s ease;
}

.model-galleries .lightbox-thumbnail:hover {
    border-color: var(--basic-primary, #2563eb);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
}

/* Basic theme carousel controls */
.model-galleries .carousel-control-prev,
.model-galleries .carousel-control-next {
    background: rgba(37, 99, 235, 0.8);
    border-radius: 4px;
    width: 40px;
    height: 40px;
    top: 50%;
    transform: translateY(-50%);
}

.model-galleries .carousel-control-prev:hover,
.model-galleries .carousel-control-next:hover {
    background: rgba(37, 99, 235, 1);
}

.model-galleries .carousel-indicators [data-bs-target] {
    background-color: var(--basic-primary, #2563eb);
    border-radius: 2px;
    width: 30px;
    height: 4px;
}

/* Gallery Layout Styles */
.gallery-section {
    margin-bottom: 3rem;
    padding: 2rem 0;
}

.gallery-section:last-child {
    margin-bottom: 0;
}

/* Grid Layout */
.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    padding: 1rem 0;
}

.gallery-item {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    background: white;
}

.gallery-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.2);
}

.gallery-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
    object-position: center;
    /* Ensure images load properly even if they're large */
    max-width: 100%;
    max-height: 100%;
}

.image-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: 1rem;
    font-size: 0.9rem;
    text-align: center;
}

/* Masonry Layout */
.masonry-grid {
    columns: 3;
    column-gap: 1.5rem;
    padding: 1rem 0;
}

.masonry-grid .gallery-item {
    break-inside: avoid;
    margin-bottom: 1.5rem;
    display: block;
}

.masonry-grid .gallery-image {
    height: auto;
    max-height: 400px;
}

/* Carousel Layout */
.carousel-container {
    position: relative;
    overflow: hidden;
    padding: 2rem 0;
}

.carousel-track {
    display: flex;
    gap: 1rem;
    transition: transform 0.5s ease-in-out;
}

.carousel-item {
    flex: 0 0 300px;
    max-width: 300px;
}

.carousel-item .gallery-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
    border-radius: 8px;
}

.carousel-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
}

.carousel-nav:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: translateY(-50%) scale(1.1);
}

.carousel-nav.prev {
    left: 0.5rem;
}

.carousel-nav.next {
    right: 0.5rem;
}

.carousel-nav:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1rem;
}

.carousel-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #d1d5db;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.carousel-dot.active {
    background: var(--basic-primary, #2563eb);
}

.carousel-dot:hover {
    background: #9ca3af;
}

/* Responsive Design */
@media (max-width: 768px) {
    .grid-container {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }
    
    .masonry-grid {
        columns: 2;
        column-gap: 1rem;
    }
    
    .carousel-container .gallery-item {
        flex: 0 0 250px;
    }
}

@media (max-width: 480px) {
    .grid-container {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .masonry-grid {
        columns: 1;
    }
    
    .carousel-container .gallery-item {
        flex: 0 0 200px;
    }
}
</style>

<!-- Call to Action -->
<section class="py-16 bg-basic-primary text-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center" data-aos="fade-up">
        <h2 class="text-3xl font-bold mb-6 basic-heading">
            Like What You See?
        </h2>
        <p class="text-xl mb-8 opacity-90 max-w-2xl mx-auto">
            Ready to book or have questions? Let's connect and discuss your needs.
        </p>
        <div class="flex flex-col sm:flex-row justify-center gap-4">
            <a href="/{{modelSlug}}/contact" class="basic-btn bg-white text-basic-primary hover:bg-gray-100">
                <i class="fas fa-envelope mr-2"></i>
                Contact Me
            </a>
            <a href="/{{modelSlug}}/rates" class="basic-btn-outline border-white text-white hover:bg-white hover:text-basic-primary">
                <i class="fas fa-list mr-2"></i>
                View Services
            </a>
        </div>
    </div>
</section>

<!-- Phase 5 Gallery System includes built-in lightbox and interactive features -->

<!-- Lightbox Modal -->
<div id="lightbox-modal" class="fixed inset-0 bg-black bg-opacity-95 z-50 hidden flex items-center justify-center p-4">
    <div class="relative max-w-6xl max-h-full">
        <!-- Close button -->
        <button onclick="closeLightbox()" 
                class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors duration-200 z-10">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
        
        <!-- Image container -->
        <div class="relative">
            <img id="lightbox-image" 
                 src="" 
                 alt="" 
                 class="max-w-full max-h-full object-contain rounded-lg">
        </div>
        
        <!-- Image caption -->
        <div class="absolute bottom-4 left-4 right-4 bg-black bg-opacity-75 text-white p-3 rounded-lg">
            <p id="lightbox-caption" class="text-center text-sm"></p>
        </div>
    </div>
</div>

<!-- Lightbox JavaScript -->
<script>
function openLightbox(imageUrl, caption) {
    const modal = document.getElementById('lightbox-modal');
    const image = document.getElementById('lightbox-image');
    const captionEl = document.getElementById('lightbox-caption');
    
    if (modal && image && captionEl) {
        image.src = imageUrl;
        image.alt = caption;
        captionEl.textContent = caption;
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
        
        // Close on escape key
        document.addEventListener('keydown', handleLightboxEscape);
        
        // Close on background click
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeLightbox();
            }
        });
    }
}

function closeLightbox() {
    const modal = document.getElementById('lightbox-modal');
    
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        
        // Restore body scroll
        document.body.style.overflow = '';
        
        // Remove event listeners
        document.removeEventListener('keydown', handleLightboxEscape);
    }
}

function handleLightboxEscape(e) {
    if (e.key === 'Escape') {
        closeLightbox();
    }
}

// Carousel Navigation Functions
function moveCarousel(sectionIndex, direction) {
    const carousel = document.getElementById(`carousel-${sectionIndex}`);
    if (!carousel) return;
    
    const items = carousel.querySelectorAll('.carousel-item');
    const currentIndex = parseInt(carousel.dataset.currentIndex || 0);
    const totalItems = items.length;
    
    let newIndex = currentIndex + direction;
    
    // Handle wrap-around
    if (newIndex < 0) newIndex = totalItems - 1;
    if (newIndex >= totalItems) newIndex = 0;
    
    // Update carousel position - account for item width and gaps
    const itemWidth = 300;
    const itemGap = 16;
    const totalItemWidth = itemWidth + itemGap;
    const translateX = -(newIndex * totalItemWidth);
    carousel.style.transform = `translateX(${translateX}px)`;
    carousel.dataset.currentIndex = newIndex;
    
    // Update dots
    updateCarouselDots(sectionIndex, newIndex);
    
    // Update navigation buttons
    updateCarouselNav(sectionIndex, newIndex, totalItems);
    
    // Restart autoplay if enabled (user interaction resets the timer)
    const container = carousel.closest('.carousel-container');
    if (container) {
        const autoplaySpeed = container.dataset.autoplay;
        if (autoplaySpeed && parseInt(autoplaySpeed) > 0) {
            startCarouselAutoplay(sectionIndex, parseInt(autoplaySpeed));
        }
    }
}

function goToCarouselSlide(sectionIndex, slideIndex) {
    const carousel = document.getElementById(`carousel-${sectionIndex}`);
    if (!carousel) return;
    
    const items = carousel.querySelectorAll('.carousel-item');
    const totalItems = items.length;
    
    if (slideIndex < 0 || slideIndex >= totalItems) return;
    
    // Update carousel position - account for item width and gaps
    const itemWidth = 300;
    const itemGap = 16;
    const totalItemWidth = itemWidth + itemGap;
    const translateX = -(slideIndex * totalItemWidth);
    carousel.style.transform = `translateX(${translateX}px)`;
    carousel.dataset.currentIndex = slideIndex;
    
    // Update dots
    updateCarouselDots(sectionIndex, slideIndex);
    
    // Update navigation buttons
    updateCarouselNav(sectionIndex, slideIndex, totalItems);
    
    // Restart autoplay if enabled (user interaction resets the timer)
    const container = carousel.closest('.carousel-container');
    if (container) {
        const autoplaySpeed = container.dataset.autoplay;
        if (autoplaySpeed && parseInt(autoplaySpeed) > 0) {
            startCarouselAutoplay(sectionIndex, parseInt(autoplaySpeed));
        }
    }
}

function updateCarouselDots(sectionIndex, activeIndex) {
    const carousel = document.querySelector(`#carousel-${sectionIndex}`);
    if (!carousel) return;
    
    const container = carousel.closest('.carousel-container');
    if (!container) return;
    
    const dots = container.querySelectorAll('.carousel-dot');
    dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === activeIndex);
    });
}

function updateCarouselNav(sectionIndex, currentIndex, totalItems) {
    const carousel = document.querySelector(`#carousel-${sectionIndex}`);
    if (!carousel) return;
    
    const container = carousel.closest('.carousel-container');
    if (!container) return;
    
    const prevBtn = container.querySelector('.carousel-nav.prev');
    const nextBtn = container.querySelector('.carousel-nav.next');
    
    if (prevBtn) prevBtn.disabled = false;
    if (nextBtn) nextBtn.disabled = false;
    
    // Optional: Disable buttons at boundaries (uncomment if you want this behavior)
    // if (prevBtn) prevBtn.disabled = (currentIndex === 0);
    // if (nextBtn) nextBtn.disabled = (currentIndex === totalItems - 1);
}

// Carousel autoplay timers
window.carouselTimers = {};

// Initialize carousels when page loads
document.addEventListener('DOMContentLoaded', function() {

    // Initialize all carousels
    const carousels = document.querySelectorAll('.carousel-track');

    
    carousels.forEach((carousel, index) => {
        carousel.dataset.currentIndex = '0';
        
        // Initialize at position 0 - the wrapper is already centered with margin: 0 auto
        carousel.style.transform = 'translateX(0px)';
        
        // Check if autoplay is enabled for this carousel
        const container = carousel.closest('.carousel-container');
        if (container) {
            const autoplaySpeed = container.dataset.autoplay;

            if (autoplaySpeed && parseInt(autoplaySpeed) > 0) {

                startCarouselAutoplay(index, parseInt(autoplaySpeed));
            } else {

            }
        } else {

        }
    });
    
    // Pause autoplay on hover
    document.querySelectorAll('.carousel-container').forEach((container, index) => {
        container.addEventListener('mouseenter', () => pauseCarouselAutoplay(index));
        container.addEventListener('mouseleave', () => {
            const autoplaySpeed = container.dataset.autoplay;
            if (autoplaySpeed && parseInt(autoplaySpeed) > 0) {
                startCarouselAutoplay(index, parseInt(autoplaySpeed));
            }
        });
    });
});

// Carousel autoplay functions
function startCarouselAutoplay(sectionIndex, speed) {

    // Clear any existing timer
    pauseCarouselAutoplay(sectionIndex);
    
    // Start new timer
    window.carouselTimers[sectionIndex] = setInterval(() => {

        moveCarousel(sectionIndex, 1); // Move to next slide
    }, speed);

}

function pauseCarouselAutoplay(sectionIndex) {
    if (window.carouselTimers[sectionIndex]) {

        clearInterval(window.carouselTimers[sectionIndex]);
        delete window.carouselTimers[sectionIndex];
    }
}
</script>