{{!-- Basic Theme - Calendar Page with Visual Monthly Grid --}}
<div class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
    <div class="container mx-auto px-4 py-8">
        {{!-- Page Header --}}
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold mb-4" style="color: var(--basic-primary);">
                My Calendar
            </h1>
            <p class="text-lg text-slate-600 max-w-3xl mx-auto">
                View my current location and availability. Check where I'm traveling and when I'm available for appointments.
            </p>
        </div>

        {{!-- Calendar Container --}}
        <div class="max-w-6xl mx-auto">
            {{!-- View Toggle (Mobile First) --}}
            <div class="flex justify-center mb-6 md:hidden">
                <div class="bg-white rounded-lg border border-gray-200 p-1 shadow-sm">
                    <button id="list-view-btn" class="px-4 py-2 rounded-lg text-sm font-medium transition-colors active">
                        List
                    </button>
                    <button id="month-view-btn" class="px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                        Month
                    </button>
                </div>
            </div>
            
            {{!-- Calendar Navigation --}}
            <div class="flex justify-between items-center mb-8">
                <button id="prev-month" class="px-4 py-2 border-2 border-blue-600 text-blue-600 rounded-lg font-medium transition-colors hover:bg-blue-600 hover:text-white">
                    ← Previous
                </button>
                <h2 id="month-title" class="text-xl font-semibold text-center" style="font-size: 22px; line-height: 28px;"></h2>
                <button id="next-month" class="px-4 py-2 border-2 border-blue-600 text-blue-600 rounded-lg font-medium transition-colors hover:bg-blue-600 hover:text-white">
                    Next →
                </button>
            </div>

            {{!-- Calendar Grid --}}
            <div id="calendar-container" class="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
                {{!-- Calendar Header --}}
                <div class="grid grid-cols-7 bg-slate-50">
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Sun</div>
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Mon</div>
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Tue</div>
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Wed</div>
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Thu</div>
                    <div class="p-4 text-center font-semibold text-slate-700 border-r border-slate-200">Fri</div>
                    <div class="p-4 text-center font-semibold text-slate-700">Sat</div>
                </div>
                
                {{!-- Calendar Body --}}
                <div id="calendar-grid">
                    <div class="text-center py-12 text-slate-500">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-400 mx-auto mb-4"></div>
                        Loading calendar...
                    </div>
                </div>
            </div>
            
            {{!-- List View --}}
            <div id="list-container" class="bg-white rounded-lg shadow-lg p-6 mb-8 hidden">
                <div id="list-view">
                    <div class="text-center py-12 text-slate-500">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-400 mx-auto mb-4"></div>
                        Loading events...
                    </div>
                </div>
            </div>

            {{!-- Legend --}}
            <div class="flex flex-wrap justify-center gap-6 mb-8">
                <div class="flex items-center">
                    <div class="w-2.5 h-2.5 rounded-full mr-2" style="background-color: {{theme.colors.success}};"></div>
                    <span class="text-sm font-medium" style="font-size: 14px; line-height: 20px;">Available</span>
                </div>
                <div class="flex items-center">
                    <div class="w-2.5 h-2.5 rounded-full mr-2" style="background-color: {{theme.colors.primary}};"></div>
                    <span class="text-sm font-medium" style="font-size: 14px; line-height: 20px;">Travel</span>
                </div>
                <div class="flex items-center">
                    <div class="w-2.5 h-2.5 rounded-full mr-2" style="background-color: {{theme.colors.warning}};"></div>
                    <span class="text-sm font-medium" style="font-size: 14px; line-height: 20px;">Vacation</span>
                </div>
                <div class="flex items-center">
                    <div class="w-2.5 h-2.5 rounded-full mr-2" style="background-color: {{theme.colors.disabled-text}};"></div>
                    <span class="text-sm font-medium" style="font-size: 14px; line-height: 20px;">Unavailable</span>
                </div>
            </div>

            {{!-- Contact Call-to-Action --}}
            <div class="bg-white border border-gray-200 rounded-lg p-8 text-center">
                <a href="/{{modelSlug}}/contact{{previewParam}}" 
                   class="inline-block px-8 py-3 bg-blue-600 text-white rounded-lg font-semibold transition-colors hover:bg-blue-700">
                    Contact Me
                </a>
            </div>
        </div>
    </div>
</div>

{{!-- Calendar JavaScript --}}
<script>
(function() {
    const slug = {{{json modelSlug}}};
    let currentYear = new Date().getFullYear();
    let currentMonth = new Date().getMonth() + 1;
    
    const calendarGrid = document.getElementById('calendar-grid');
    const monthTitle = document.getElementById('month-title');
    const prevButton = document.getElementById('prev-month');
    const nextButton = document.getElementById('next-month');
    
    async function loadCalendar(year = currentYear, month = currentMonth) {
        try {
            const response = await fetch(`/api/model-calendar/${slug}?year=${year}&month=${month}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || 'Failed to load calendar');
            }
            
            const calendar = data.data.calendar;
            currentYear = year;
            currentMonth = month;
            
            // Update month title
            monthTitle.textContent = `${calendar.monthName} ${calendar.year}`;
            
            // Generate calendar grid
            let gridHtml = '';
            
            const cellHeights = {
                desktop: 92,
                tablet: 64,
                mobile: 56
            };
            
            const screenWidth = window.innerWidth;
            const cellHeight = screenWidth >= 1024 ? cellHeights.desktop : 
                             screenWidth >= 768 ? cellHeights.tablet : cellHeights.mobile;
            
            calendar.weeks.forEach((week, weekIndex) => {
                gridHtml += `<div class="grid grid-cols-7 border-t border-slate-200 relative" style="min-height: ${cellHeight + (week.spans.length * 28)}px;">`;
                
                // Day cells
                week.days.forEach((day, dayIndex) => {
                    const isToday = day === new Date().getDate() && 
                                  currentMonth === (new Date().getMonth() + 1) && 
                                  currentYear === new Date().getFullYear();
                    
                    gridHtml += `
                        <div class="p-2 border-r border-slate-200 ${day === 0 ? 'bg-slate-50' : ''} relative" style="min-height: ${cellHeight}px;">
                            ${day > 0 ? `
                                <div class="text-sm font-semibold mb-2 ${isToday ? 'text-blue-600' : 'text-slate-700'} relative z-10">
                                    ${day}
                                </div>
                            ` : ''}
                        </div>
                    `;
                });
                
                // Add availability spans positioned absolutely over the week
                week.spans.forEach((span, spanIndex) => {
                    const eventColors = {
                        'available': '{{theme.colors.success}}',
                        'travel': '{{theme.colors.primary}}',
                        'vacation': '{{theme.colors.warning}}', 
                        'unavailable': '{{theme.colors.disabled-text}}'
                    };
                    
                    const textColors = {
                        'available': 'white',
                        'travel': 'white',
                        'vacation': '#1F2937',
                        'unavailable': 'white'
                    };
                    
                    const bgColor = eventColors[span.status] || span.color;
                    const textColor = textColors[span.status] || 'white';
                    
                    gridHtml += `
                        <div class="absolute text-xs px-2 py-1 z-10 flex items-center justify-center font-medium shadow-sm"
                             style="background-color: ${bgColor};
                                    color: ${textColor};
                                    border-radius: 8px;
                                    left: ${span.start_pos * 14.285714}%; 
                                    width: ${span.width * 14.285714}%;
                                    top: ${32 + (spanIndex * 28)}px; 
                                    height: 24px;
                                    margin-left: 1px;
                                    margin-right: 1px;">
                            <span class="truncate text-xs overflow-hidden text-ellipsis whitespace-nowrap">
                                ${span.location}
                                ${span.status === 'vacation' ? ' - Vacation' : ''}
                            </span>
                        </div>
                    `;
                });
                
                gridHtml += '</div>';
            });
            
            // Generate list view
            generateListView(calendar);
            
            calendarGrid.innerHTML = gridHtml;
            
        } catch (error) {
            console.error('Error loading calendar:', error);
            calendarGrid.innerHTML = `
                <div class="text-center py-12 text-red-500">
                    <div class="text-4xl mb-4">⚠️</div>
                    <h3 class="text-lg font-semibold mb-2">Unable to Load Calendar</h3>
                    <p>Please contact me directly for availability information.</p>
                </div>
            `;
            document.getElementById('list-view').innerHTML = calendarGrid.innerHTML;
        }
    }
    
    function generateListView(calendar) {
        const listView = document.getElementById('list-view');
        if (!listView) return;
        
        let listHtml = '';
        const events = [];
        
        // Collect all events from calendar data
        calendar.weeks.forEach(week => {
            week.spans.forEach(span => {
                const startDate = new Date(calendar.year, calendar.month - 1, span.start_day);
                events.push({
                    date: startDate,
                    status: span.status,
                    location: span.location,
                    duration: span.duration || 1
                });
            });
        });
        
        // Sort events by date
        events.sort((a, b) => a.date - b.date);
        
        const eventColors = {
            'available': '{{theme.colors.success}}',
            'travel': '{{theme.colors.primary}}',
            'vacation': '{{theme.colors.warning}}',
            'unavailable': '{{theme.colors.disabled-text}}'
        };
        
        // Generate list items
        if (events.length === 0) {
            listHtml = '<div class="text-center py-8 text-gray-500">No events this month</div>';
        } else {
            events.forEach(event => {
                const dateStr = event.date.toLocaleDateString('en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                });
                
                listHtml += `
                    <div class="flex items-center justify-between py-3 border-b border-gray-200 last:border-b-0">
                        <div class="flex items-center">
                            <div class="w-3 h-3 rounded-full mr-3" style="background-color: ${eventColors[event.status]}"></div>
                            <div>
                                <div class="font-medium text-gray-900">${dateStr}</div>
                                <div class="text-sm text-gray-600">${event.status.charAt(0).toUpperCase() + event.status.slice(1)}</div>
                            </div>
                        </div>
                        <div class="text-sm font-medium text-gray-700">
                            ${event.location}
                        </div>
                    </div>
                `;
            });
        }
        
        listView.innerHTML = listHtml;
    }
    
    // Navigation event listeners
    prevButton.addEventListener('click', () => {
        if (currentMonth === 1) {
            currentMonth = 12;
            currentYear--;
        } else {
            currentMonth--;
        }
        loadCalendar(currentYear, currentMonth);
    });
    
    nextButton.addEventListener('click', () => {
        if (currentMonth === 12) {
            currentMonth = 1;
            currentYear++;
        } else {
            currentMonth++;
        }
        loadCalendar(currentYear, currentMonth);
    });
    
    // Keyboard support
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
            e.preventDefault();
            prevButton.click();
        } else if (e.key === 'ArrowRight') {
            e.preventDefault();
            nextButton.click();
        }
    });
    
    // View toggle functionality
    const listViewBtn = document.getElementById('list-view-btn');
    const monthViewBtn = document.getElementById('month-view-btn');
    const calendarContainer = document.getElementById('calendar-container');
    const listContainer = document.getElementById('list-container');
    
    let currentView = window.innerWidth <= 640 ? 'list' : 'month';
    
    function switchView(view) {
        currentView = view;
        
        if (view === 'list') {
            calendarContainer.classList.add('hidden');
            listContainer.classList.remove('hidden');
            listViewBtn.classList.add('active');
            monthViewBtn.classList.remove('active');
        } else {
            calendarContainer.classList.remove('hidden');
            listContainer.classList.add('hidden');
            monthViewBtn.classList.add('active');
            listViewBtn.classList.remove('active');
        }
    }
    
    if (listViewBtn && monthViewBtn) {
        listViewBtn.addEventListener('click', () => switchView('list'));
        monthViewBtn.addEventListener('click', () => switchView('month'));
    }
    
    // Set initial view
    switchView(currentView);
    
    // Load initial calendar
    loadCalendar();
})();
</script>

<style>
#list-view-btn.active,
#month-view-btn.active {
    background-color: {{theme.colors.primary}};
    color: white;
}

#list-view-btn,
#month-view-btn {
    background-color: transparent;
    color: {{theme.colors.text}};
}

#list-view-btn:hover,
#month-view-btn:hover {
    background-color: {{theme.colors.surface}};
    color: {{theme.colors.primary}};
}

@media (min-width: 641px) {
    #list-container {
        display: none !important;
    }
}

@media (max-width: 640px) {
    #calendar-container {
        display: none !important;
    }
    #list-container {
        display: block !important;
    }
}
</style>