{{!-- Modern Theme - Calendar Page with Visual Monthly Grid --}}

{{!-- Standardized Modern Hero Section --}}
<section class="hero-section" style="min-height: 40vh; background: {{theme.colors.hero-bg}}; display: flex; align-items: center; position: relative;">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    <h1 style="font-size: 3.75rem; font-weight: 800; margin-bottom: 1.5rem; color: {{theme.colors.hero-text}};">
      {{#if calendar_content.page_title}}{{calendar_content.page_title}}{{else}}My Calendar{{/if}}
    </h1>
    {{#if calendar_content.page_subtitle}}
    <p style="font-size: 1.25rem; color: {{theme.colors.hero-subtext}}; max-width: 42rem; margin: 0 auto;">
      {{calendar_content.page_subtitle}}
    </p>
    {{else}}
    <p style="font-size: 1.25rem; color: {{theme.colors.hero-subtext}}; max-width: 42rem; margin: 0 auto;">
      View my availability and travel schedule. Clean, simple, and always up-to-date.
    </p>
    {{/if}}
  </div>
</section>

<div class="min-h-screen" style="background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);">
    <div class="container mx-auto px-4 py-16">

        {{!-- Calendar Container --}}
        <div class="max-w-6xl mx-auto">
            {{!-- Calendar Navigation --}}
            <div class="flex justify-between items-center mb-12">
                <button onclick="document.getElementById('prev-month').click()" 
                        style="display: inline-flex; align-items: center; padding: 0.75rem 1.5rem; background: {{theme.colors.primary}}; color: {{theme.colors.primary-text}}; border-radius: 0.5rem; border: none; font-weight: 600; cursor: pointer; transition: all 0.2s ease;"
                        onmouseover="this.style.background='{{theme.colors.btn-bg-hover}}'"
                        onmouseout="this.style.background='{{theme.colors.primary}}'">
                    <i class="fas fa-chevron-left" style="margin-right: 0.5rem;"></i>
                    {{#if calendar_content.nav_previous_text}}{{calendar_content.nav_previous_text}}{{else}}← Previous{{/if}}
                </button>
                <h2 id="month-title" class="text-4xl font-black tracking-tight" style="color: {{theme.colors.text}};"></h2>
                <button onclick="document.getElementById('next-month').click()" 
                        style="display: inline-flex; align-items: center; padding: 0.75rem 1.5rem; background: {{theme.colors.primary}}; color: {{theme.colors.primary-text}}; border-radius: 0.5rem; border: none; font-weight: 600; cursor: pointer; transition: all 0.2s ease;"
                        onmouseover="this.style.background='{{theme.colors.btn-bg-hover}}'"
                        onmouseout="this.style.background='{{theme.colors.primary}}'">
                    {{#if calendar_content.nav_next_text}}{{calendar_content.nav_next_text}}{{else}}Next →{{/if}}
                    <i class="fas fa-chevron-right" style="margin-left: 0.5rem;"></i>
                </button>
                
                <!-- Hidden actual navigation buttons for functionality -->
                <button id="prev-month" style="display: none;"></button>
                <button id="next-month" style="display: none;"></button>
            </div>

            {{!-- Mobile View Toggle --}}
            <div class="modern-mobile-toggle mb-8">
                <div class="modern-toggle-container">
                    <button id="list-view-btn" class="modern-toggle-btn" data-view="list">
                        <i class="fas fa-list"></i>
                        <span>List</span>
                    </button>
                    <button id="month-view-btn" class="modern-toggle-btn modern-toggle-active" data-view="month">
                        <i class="fas fa-calendar-alt"></i>
                        <span>Month</span>
                    </button>
                </div>
            </div>

            {{!-- Calendar Grid --}}
            <div class="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden mb-12" style="box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                {{!-- Calendar Header --}}
                <div class="grid grid-cols-7" style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%);">
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Sun</div>
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Mon</div>
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Tue</div>
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Wed</div>
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Thu</div>
                    <div class="p-4 text-center font-bold text-white border-r" style="border-color: rgba(255, 255, 255, 0.1);">Fri</div>
                    <div class="p-4 text-center font-bold text-white">Sat</div>
                </div>
                
                {{!-- Calendar Body --}}
                <div id="calendar-grid">
                    <div class="text-center py-16">
                        <div class="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 border-t-gray-900 mx-auto mb-6"></div>
                        <p class="text-lg text-gray-600">{{#if calendar_content.loading_message}}{{calendar_content.loading_message}}{{else}}Loading calendar...{{/if}}</p>
                    </div>
                </div>
            </div>

            {{!-- List View (Hidden by default) --}}
            <div id="list-view" class="modern-list-view bg-white rounded-3xl shadow-2xl border border-gray-100 overflow-hidden mb-12" style="display: none;">
                <div class="modern-list-loading">
                    <div class="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 border-t-gray-900 mx-auto mb-6"></div>
                    <p class="text-lg text-gray-600">{{#if calendar_content.loading_message}}{{calendar_content.loading_message}}{{else}}Loading calendar...{{/if}}</p>
                </div>
            </div>

            {{!-- Legend --}}
            {{#if calendar_content.calendar_legend_visible}}
            <div class="flex flex-wrap justify-center gap-8 mb-12">
                <div class="flex items-center">
                    <div class="w-5 h-5 rounded mr-3" style="background-color: #10B981;"></div>
                    <span class="text-lg font-medium text-gray-700">{{#if calendar_content.legend_available_label}}{{calendar_content.legend_available_label}}{{else}}Available{{/if}}</span>
                </div>
                <div class="flex items-center">
                    <div class="w-5 h-5 rounded mr-3" style="background-color: #3B82F6;"></div>
                    <span class="text-lg font-medium text-gray-700">{{#if calendar_content.legend_travel_label}}{{calendar_content.legend_travel_label}}{{else}}Travel{{/if}}</span>
                </div>
                <div class="flex items-center">
                    <div class="w-5 h-5 rounded mr-3" style="background-color: #F59E0B;"></div>
                    <span class="text-lg font-medium text-gray-700">{{#if calendar_content.legend_vacation_label}}{{calendar_content.legend_vacation_label}}{{else}}Vacation{{/if}}</span>
                </div>
                <div class="flex items-center">
                    <div class="w-5 h-5 rounded mr-3" style="background-color: #6B7280;"></div>
                    <span class="text-lg font-medium text-gray-700">{{#if calendar_content.legend_unavailable_label}}{{calendar_content.legend_unavailable_label}}{{else}}Unavailable{{/if}}</span>
                </div>
            </div>
            {{/if}}

            {{!-- Contact Call-to-Action --}}
            {{#if calendar_content.cta_visible}}
            <div class="bg-white rounded-3xl shadow-2xl border border-gray-100 p-12 text-center">
                <h3 class="text-3xl font-black mb-6 text-gray-900">
                    {{#if calendar_content.cta_title}}{{calendar_content.cta_title}}{{else}}Ready to Connect?{{/if}}
                </h3>
                {{#if calendar_content.cta_text}}
                <p class="text-gray-600 mb-8 text-xl leading-relaxed">
                    {{calendar_content.cta_text}}
                </p>
                {{else}}
                <p class="text-gray-600 mb-8 text-xl leading-relaxed">
                    Reach out to schedule an appointment or ask about my availability.
                </p>
                {{/if}}
                <a href="{{#if calendar_content.cta_button_link}}{{calendar_content.cta_button_link}}{{else}}/{{modelSlug}}/contact{{previewParam}}{{/if}}" 
                   style="display: inline-flex; align-items: center; padding: 1rem 2rem; background: {{theme.colors.primary}}; color: {{theme.colors.primary-text}}; font-weight: 600; font-size: 1.125rem; border-radius: 0.5rem; text-decoration: none; transition: all 0.2s ease;"
                   onmouseover="this.style.background='{{theme.colors.btn-bg-hover}}'"
                   onmouseout="this.style.background='{{theme.colors.primary}}'">
                    <i class="fas fa-envelope" style="margin-right: 0.75rem;"></i>
                    {{#if calendar_content.cta_button_text}}{{calendar_content.cta_button_text}}{{else}}Contact Me{{/if}}
                </a>
            </div>
            {{/if}}
        </div>
    </div>
</div>

{{!-- Modern Calendar Styles --}}
<style>
/* Mobile View Toggle */
.modern-mobile-toggle {
    display: none;
    justify-content: center;
}

.modern-toggle-container {
    background: white;
    border: 2px solid #E5E7EB;
    border-radius: 12px;
    padding: 4px;
    display: flex;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.modern-toggle-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 8px 16px;
    background: transparent;
    border: none;
    border-radius: 8px;
    color: #6B7280;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.modern-toggle-btn:hover {
    background: #F3F4F6;
    color: #374151;
}

.modern-toggle-btn.modern-toggle-active {
    background: #111827;
    color: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* List View */
.modern-list-view {
    padding: 2rem;
}

.modern-list-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
}

.modern-list-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 0;
    border-bottom: 1px solid #E5E7EB;
}

.modern-list-item:last-child {
    border-bottom: none;
}

.modern-list-date {
    font-size: 16px;
    font-weight: 700;
    color: #111827;
    min-width: 120px;
}

.modern-list-status {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
    margin-left: 2rem;
}

.modern-list-status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    flex-shrink: 0;
}

.modern-list-status-text {
    font-size: 16px;
    color: #374151;
    font-weight: 500;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .modern-mobile-toggle {
        display: flex;
    }
    
    .modern-toggle-btn span {
        display: none;
    }
    
    .modern-toggle-btn {
        padding: 10px 14px;
    }
    
    /* Default to list view on mobile */
    .bg-white.rounded-3xl.shadow-2xl.border.border-gray-100.overflow-hidden.mb-12:not(.modern-list-view) {
        display: none !important;
    }
    
    .modern-list-view {
        display: block !important;
    }
    
    .modern-toggle-btn[data-view="list"] {
        background: #111827;
        color: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .modern-toggle-btn[data-view="month"] {
        background: transparent;
        color: #6B7280;
    }
    
    .modern-list-date {
        min-width: 80px;
        font-size: 14px;
    }
    
    .modern-list-status {
        margin-left: 1rem;
    }
    
    .modern-list-status-text {
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    .flex.justify-between.items-center.mb-12 {
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }
    
    #month-title {
        order: -1;
        font-size: 2rem !important;
    }
    
    .modern-list-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
        padding: 1rem 0;
    }
    
    .modern-list-status {
        margin-left: 0;
    }
}
</style>

{{!-- Calendar JavaScript --}}
<script>
(function() {
    const slug = {{{json modelSlug}}};
    let currentYear = new Date().getFullYear();
    let currentMonth = new Date().getMonth() + 1;
    let currentView = window.innerWidth <= 768 ? 'list' : 'month';
    
    const calendarGrid = document.getElementById('calendar-grid');
    const listView = document.getElementById('list-view');
    const monthTitle = document.getElementById('month-title');
    const prevButton = document.getElementById('prev-month');
    const nextButton = document.getElementById('next-month');
    const listViewBtn = document.getElementById('list-view-btn');
    const monthViewBtn = document.getElementById('month-view-btn');
    
    // Event color mapping
    const eventColors = {
        'available': '#10B981',
        'travel': '#3B82F6', 
        'vacation': '#F59E0B',
        'unavailable': '#6B7280'
    };
    
    const eventTextColors = {
        'available': 'white',
        'travel': 'white',
        'vacation': 'white', 
        'unavailable': 'white'
    };
    
    async function loadCalendar(year = currentYear, month = currentMonth) {
        try {
            const response = await fetch(`/api/model-calendar/${slug}?year=${year}&month=${month}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || 'Failed to load calendar');
            }
            
            const calendar = data.data.calendar;
            currentYear = year;
            currentMonth = month;
            
            // Update month title
            if (monthTitle) {
                monthTitle.textContent = `${calendar.monthName} ${calendar.year}`;
            }
            
            // Generate calendar grid
            let gridHtml = '';
            
            calendar.weeks.forEach((week, weekIndex) => {
                gridHtml += `<div class="grid grid-cols-7 border-t border-gray-200 relative" style="min-height: ${96 + (week.spans.length * 28)}px;">`;
                
                // Day cells
                week.days.forEach((day, dayIndex) => {
                    const isToday = day === new Date().getDate() && 
                                  currentMonth === (new Date().getMonth() + 1) && 
                                  currentYear === new Date().getFullYear();
                    
                    gridHtml += `
                        <div class="p-3 border-r border-gray-200 ${day === 0 ? 'bg-gray-50' : ''} relative min-h-24">
                            ${day > 0 ? `
                                <div class="text-sm font-bold mb-2 ${isToday ? 'text-gray-900 bg-gray-900 text-white rounded-full w-6 h-6 flex items-center justify-center' : 'text-gray-700'} relative z-10">
                                    ${day}
                                </div>
                            ` : ''}
                        </div>
                    `;
                });
                
                // Add availability spans positioned absolutely over the week
                week.spans.forEach((span, spanIndex) => {
                    gridHtml += `
                        <div class="absolute text-xs rounded px-3 py-1 z-10 flex items-center justify-center font-bold shadow-xl text-white"
                             style="background-color: ${span.color}; 
                                    left: ${span.start_pos * 14.285714}%; 
                                    width: ${span.width * 14.285714}%;
                                    top: ${36 + (spanIndex * 28)}px; 
                                    height: 26px;
                                    margin-left: 2px;
                                    margin-right: 2px;
                                    border: 2px solid rgba(0,0,0,0.1);">
                            <span class="truncate text-xs font-bold">
                                ${span.location}
                                ${span.status === 'vacation' ? ' - Vacation' : ''}
                            </span>
                        </div>
                    `;
                });
                
                gridHtml += '</div>';
            });
            
            if (calendarGrid) {
                calendarGrid.innerHTML = gridHtml;
            }
            
            // Generate list view if needed
            if (currentView === 'list') {
                generateListView(calendar);
            }
            
        } catch (error) {
            console.error('Error loading calendar:', error);
            if (calendarGrid) {
                calendarGrid.innerHTML = `
                    <div class="text-center py-16 text-red-500">
                        <div class="text-6xl mb-6">⚠️</div>
                        <h3 class="text-2xl font-bold mb-4">{{#if calendar_content.error_title}}{{calendar_content.error_title}}{{else}}Calendar Unavailable{{/if}}</h3>
                        <p class="text-lg">{{#if calendar_content.error_message}}{{calendar_content.error_message}}{{else}}Please contact me directly for scheduling information.{{/if}}</p>
                    </div>
                `;
            }
        }
    }
    
    function generateListView(calendar) {
        if (!listView) return;
        
        let listHtml = '';
        const events = [];
        
        // Collect all events from calendar data
        calendar.weeks.forEach(week => {
            week.spans.forEach(span => {
                const startDate = new Date(calendar.year, calendar.month - 1, span.start_day);
                events.push({
                    date: startDate,
                    status: span.status,
                    location: span.location,
                    duration: span.duration || 1
                });
            });
        });
        
        // Sort events by date
        events.sort((a, b) => a.date - b.date);
        
        // Generate list items
        if (events.length === 0) {
            listHtml = '<div class="text-center py-8 text-gray-500">No events this month</div>';
        } else {
            events.forEach(event => {
                const dateStr = event.date.toLocaleDateString('en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                });
                
                listHtml += `
                    <div class="modern-list-item">
                        <div class="modern-list-date">${dateStr}</div>
                        <div class="modern-list-status">
                            <div class="modern-list-status-dot" style="background-color: ${eventColors[event.status]}"></div>
                            <span class="modern-list-status-text">
                                ${event.status.charAt(0).toUpperCase() + event.status.slice(1)} 
                                ${event.location ? `- ${event.location}` : ''}
                            </span>
                        </div>
                    </div>
                `;
            });
        }
        
        listView.innerHTML = listHtml;
    }
    
    function switchView(newView) {
        currentView = newView;
        
        if (newView === 'list') {
            if (calendarGrid && calendarGrid.parentElement) {
                calendarGrid.parentElement.style.display = 'none';
            }
            if (listView) {
                listView.style.display = 'block';
            }
            if (listViewBtn) {
                listViewBtn.classList.add('modern-toggle-active');
            }
            if (monthViewBtn) {
                monthViewBtn.classList.remove('modern-toggle-active');
            }
        } else {
            if (calendarGrid && calendarGrid.parentElement) {
                calendarGrid.parentElement.style.display = 'block';
            }
            if (listView) {
                listView.style.display = 'none';
            }
            if (monthViewBtn) {
                monthViewBtn.classList.add('modern-toggle-active');
            }
            if (listViewBtn) {
                listViewBtn.classList.remove('modern-toggle-active');
            }
        }
        
        // Reload calendar data for current view
        loadCalendar(currentYear, currentMonth);
    }
    
    // View toggle event listeners
    if (listViewBtn && monthViewBtn) {
        listViewBtn.addEventListener('click', () => switchView('list'));
        monthViewBtn.addEventListener('click', () => switchView('month'));
    }
    
    // Set initial view based on screen size
    if (window.innerWidth <= 768) {
        currentView = 'list';
        if (listViewBtn) listViewBtn.classList.add('modern-toggle-active');
        if (monthViewBtn) monthViewBtn.classList.remove('modern-toggle-active');
    }
    
    // Navigation event listeners
    if (prevButton) {
        prevButton.addEventListener('click', () => {
            if (currentMonth === 1) {
                currentMonth = 12;
                currentYear--;
            } else {
                currentMonth--;
            }
            loadCalendar(currentYear, currentMonth);
        });
    }
    
    if (nextButton) {
        nextButton.addEventListener('click', () => {
            if (currentMonth === 12) {
                currentMonth = 1;
                currentYear++;
            } else {
                currentMonth++;
            }
            loadCalendar(currentYear, currentMonth);
        });
    }
    
    // Load initial calendar
    loadCalendar();
})();
</script>