<!-- Drag & Drop Gallery Builder Component (Phase 8.1) -->
<div class="modal fade" id="dragDropGalleryModal" tabindex="-1" role="dialog" aria-labelledby="dragDropGalleryTitle" aria-describedby="dragDropGalleryDescription">
  <div class="modal-dialog modal-fullscreen" role="document">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h4 class="modal-title" id="dragDropGalleryTitle">
          <i class="fas fa-magic me-2"></i>Drag & Drop Gallery Builder
        </h4>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      
      <div class="modal-body p-0">
        <div class="row g-0 h-100">
          <!-- Left Side: Image Library -->
          <div class="col-md-8 border-end">
            <div class="d-flex flex-column h-100">
              <!-- Library Header -->
              <div class="p-3 bg-light border-bottom">
                <div class="row g-2">
                  <div class="col-md-3">
                    <label for="dragDropSearchInput" class="form-label mb-1">
                      <i class="fas fa-search me-1"></i>Search Images
                    </label>
                    <input type="text" class="form-control form-control-sm" id="dragDropSearchInput" placeholder="Search filenames...">
                  </div>
                  
                  <div class="col-md-2">
                    <label for="dragDropStatusFilter" class="form-label mb-1">Status</label>
                    <select class="form-select form-select-sm" id="dragDropStatusFilter">
                      <option value="approved">Approved Only</option>
                      <option value="approved_blurred">Approved + Blurred</option>
                      <option value="all">All Statuses</option>
                    </select>
                  </div>
                  
                  <div class="col-md-2">
                    <label for="dragDropContextFilter" class="form-label mb-1">Context</label>
                    <select class="form-select form-select-sm" id="dragDropContextFilter">
                      <option value="all">All Contexts</option>
                      <option value="public_site">Public Site</option>
                      <option value="paysite">Paysite</option>
                      <option value="private">Private</option>
                    </select>
                  </div>
                  
                  <div class="col-md-2">
                    <label for="dragDropSortSelect" class="form-label mb-1">Sort</label>
                    <select class="form-select form-select-sm" id="dragDropSortSelect">
                      <option value="newest">Newest First</option>
                      <option value="oldest">Oldest First</option>
                      <option value="name">Name A-Z</option>
                    </select>
                  </div>
                  
                  <div class="col-md-3">
                    <label class="form-label mb-1">Actions</label>
                    <div class="btn-group w-100" role="group">
                      <button type="button" class="btn btn-outline-primary btn-sm" id="dragDropSelectAll">
                        <i class="fas fa-check-square me-1"></i>Select All
                      </button>
                      <button type="button" class="btn btn-outline-secondary btn-sm" id="dragDropClearAll">
                        <i class="fas fa-times me-1"></i>Clear
                      </button>
                    </div>
                  </div>
                </div>
                
                <!-- Selection Status Bar -->
                <div class="mt-2 d-flex justify-content-between align-items-center">
                  <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    <span id="dragDropImageCount">0 images</span> • 
                    <span id="dragDropSelectedCount">0 selected</span>
                  </small>
                  <small class="text-primary">
                    <i class="fas fa-hand-pointer me-1"></i>
                    Drag images to gallery sections on the right →
                  </small>
                </div>
              </div>
              
              <!-- Library Grid (Scrollable) -->
              <div class="flex-fill overflow-auto p-3" id="dragDropImageLibrary">
                <div class="row g-2" id="dragDropImageGrid">
                  <!-- Images will be loaded here -->
                  <div class="col-12 text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading images...</span>
                    </div>
                    <p class="text-muted mt-2">Loading your image library...</p>
                  </div>
                </div>
                
                <!-- Pagination -->
                <nav aria-label="Image library pagination" class="mt-3" id="dragDropPagination" style="display: none;">
                  <ul class="pagination pagination-sm justify-content-center" id="dragDropPaginationList">
                    <!-- Pagination will be dynamically inserted here -->
                  </ul>
                </nav>
              </div>
            </div>
          </div>
          
          <!-- Right Side: Gallery Sections -->
          <div class="col-md-4">
            <div class="d-flex flex-column h-100">
              <!-- Gallery Header -->
              <div class="p-3 bg-light border-bottom">
                <h6 class="mb-2">
                  <i class="fas fa-layer-group me-2"></i>Gallery Sections
                  <span class="badge bg-primary ms-2" id="dragDropSectionCount">0</span>
                </h6>
                <small class="text-muted">
                  <i class="fas fa-arrow-left me-1"></i>
                  Drop images here to add them to sections
                </small>
              </div>
              
              <!-- Gallery Sections (Scrollable) -->
              <div class="flex-fill overflow-auto" id="dragDropGallerySections">
                <!-- Sections will be loaded here -->
                <div class="p-3 text-center text-muted">
                  <div class="spinner-border spinner-border-sm" role="status">
                    <span class="visually-hidden">Loading sections...</span>
                  </div>
                  <p class="small mt-2">Loading gallery sections...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="modal-footer bg-light">
        <div class="d-flex justify-content-between align-items-center w-100">
          <div class="text-muted small">
            <i class="fas fa-lightbulb me-1"></i>
            <strong>Tip:</strong> Hold Ctrl/Cmd while clicking to select multiple images, then drag them together
          </div>
          
          <div>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              <i class="fas fa-times me-1"></i>Close Builder
            </button>
            <button type="button" class="btn btn-success" id="dragDropSaveChanges">
              <i class="fas fa-save me-1"></i>Save Changes
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Drag & Drop Gallery Builder Styles */
.drag-drop-gallery-modal .modal-dialog {
  max-width: 95vw;
  margin: 1rem;
}

/* Draggable Image Tiles */
.drag-image-tile {
  position: relative;
  cursor: grab;
  transition: all 0.2s ease;
  border: 2px solid transparent;
  border-radius: 0.375rem;
  overflow: hidden;
}

.drag-image-tile:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  border-color: #dee2e6;
}

.drag-image-tile.selected {
  border-color: #0d6efd;
  box-shadow: 0 4px 12px rgba(13,110,253,0.3);
}

.drag-image-tile.dragging {
  cursor: grabbing;
  opacity: 0.8;
  transform: rotate(3deg) scale(1.05);
  z-index: 1000;
}

.drag-image-tile.drag-disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Multi-select indicator */
.drag-image-tile .select-indicator {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: rgba(255,255,255,0.9);
  border: 2px solid #dee2e6;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  transition: all 0.2s ease;
}

.drag-image-tile.selected .select-indicator {
  background: #0d6efd;
  border-color: #0d6efd;
  color: white;
}

/* Status badges */
.drag-image-tile .status-badges {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  gap: 4px;
}

.drag-image-tile .status-badge {
  font-size: 10px;
  padding: 2px 6px;
  border-radius: 12px;
  font-weight: 500;
}

/* Drop Zones */
.gallery-drop-zone {
  min-height: 120px;
  border: 2px dashed #dee2e6;
  border-radius: 0.5rem;
  background: rgba(248,249,250,0.5);
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  margin: 8px;
  position: relative;
}

.gallery-drop-zone.drop-active {
  border-color: #0d6efd;
  background: rgba(13,110,253,0.1);
  transform: scale(1.02);
}

.gallery-drop-zone.drop-valid {
  border-color: #198754;
  background: rgba(25,135,84,0.1);
}

.gallery-drop-zone.drop-invalid {
  border-color: #dc3545;
  background: rgba(220,53,69,0.1);
}

.gallery-drop-zone .drop-message {
  color: #6c757d;
  font-size: 14px;
  pointer-events: none;
}

.gallery-drop-zone.drop-active .drop-message {
  color: #0d6efd;
  font-weight: 500;
}

/* Gallery Section Cards */
.gallery-section-card {
  border: 1px solid #dee2e6;
  border-radius: 0.5rem;
  margin: 8px;
  background: white;
  transition: all 0.2s ease;
}

.gallery-section-card.drop-target {
  border-color: #0d6efd;
  box-shadow: 0 0 0 0.2rem rgba(13,110,253,0.25);
}

.gallery-section-card .section-header {
  padding: 12px 16px;
  border-bottom: 1px solid #dee2e6;
  background: #f8f9fa;
  border-radius: 0.5rem 0.5rem 0 0;
}

.gallery-section-card .section-content {
  padding: 12px;
}

.gallery-section-card .section-images {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
  gap: 8px;
  margin-top: 12px;
}

.gallery-section-card .section-image {
  aspect-ratio: 1;
  border-radius: 0.25rem;
  overflow: hidden;
  border: 1px solid #dee2e6;
  transition: all 0.2s ease;
}

.gallery-section-card .section-image:hover {
  transform: scale(1.05);
  border-color: #0d6efd;
}

/* Drag Preview */
.drag-preview {
  position: fixed;
  pointer-events: none;
  z-index: 10000;
  opacity: 0.9;
  transform: rotate(3deg);
  transition: none;
}

.drag-preview .preview-image {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 0.375rem;
  border: 2px solid #0d6efd;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.drag-preview .preview-count {
  position: absolute;
  top: -8px;
  right: -8px;
  background: #dc3545;
  color: white;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  font-size: 12px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* Animation classes */
.fade-in {
  animation: fadeIn 0.3s ease;
}

.slide-up {
  animation: slideUp 0.3s ease;
}

.bounce-in {
  animation: bounceIn 0.4s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@keyframes bounceIn {
  0% { transform: scale(0.3); opacity: 0; }
  50% { transform: scale(1.05); }
  70% { transform: scale(0.9); }
  100% { transform: scale(1); opacity: 1; }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .drag-drop-gallery-modal .modal-dialog {
    margin: 0.5rem;
  }
  
  .drag-image-tile {
    margin-bottom: 12px;
  }
  
  .gallery-section-card .section-images {
    grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
    gap: 6px;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .drag-image-tile {
    border: 2px solid ButtonText;
  }
  
  .gallery-drop-zone {
    border: 3px dashed ButtonText;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .drag-image-tile,
  .gallery-drop-zone,
  .gallery-section-card {
    transition: none;
  }
  
  .fade-in,
  .slide-up,
  .bounce-in {
    animation: none;
  }
}

/* Mobile-specific drag and drop styles */
.mobile-drag-preview {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.8);
  z-index: 2000;
  background: rgba(0, 0, 0, 0.9);
  border-radius: 12px;
  padding: 1rem;
  color: white;
  text-align: center;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  opacity: 0;
  transition: all 0.3s ease;
  max-width: 280px;
}

.mobile-drag-preview .preview-thumbnail {
  position: relative;
  margin-bottom: 0.75rem;
}

.mobile-drag-preview .preview-thumbnail img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
  border: 2px solid rgba(255, 255, 255, 0.3);
}

.mobile-drag-preview .preview-badge {
  position: absolute;
  top: -8px;
  right: -8px;
  background: #007bff;
  color: white;
  border-radius: 50%;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: bold;
  border: 2px solid white;
}

.mobile-drag-preview .preview-text {
  font-size: 0.85rem;
  opacity: 0.9;
}

.mobile-drag-instruction {
  position: fixed;
  bottom: 80px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1999;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 25px;
  font-size: 0.85rem;
  max-width: 90%;
  text-align: center;
  animation: slideUpFadeIn 0.3s ease;
}

.mobile-drag-instruction .instruction-content {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 0.5rem;
}

@keyframes slideUpFadeIn {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

.mobile-drop-active {
  background: rgba(0, 123, 255, 0.1) !important;
  border-color: #007bff !important;
  border-width: 3px !important;
  animation: mobileDropPulse 1.5s ease-in-out infinite;
}

@keyframes mobileDropPulse {
  0%, 100% {
    border-color: #007bff;
    box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4);
  }
  50% {
    border-color: #0056b3;
    box-shadow: 0 0 0 8px rgba(0, 123, 255, 0.1);
  }
}

/* Mobile touch enhancements */
@media (max-width: 768px) {
  .drag-image-tile {
    min-height: 48px;
    cursor: pointer;
  }
  
  .gallery-drop-zone {
    min-height: 120px;
    padding: 1rem;
  }
  
  .gallery-drop-zone .drop-zone-content {
    font-size: 0.9rem;
  }
  
  .mobile-drag-preview {
    max-width: 90vw;
  }
  
  .modal-fullscreen .col-md-8 {
    flex: 1;
  }
  
  .modal-fullscreen .col-md-4 {
    flex: 0 0 auto;
    width: 100%;
    max-height: 40vh;
  }
  
  /* Stack vertically on mobile */
  .modal-fullscreen .row {
    flex-direction: column;
  }
  
  /* Swipe indicator for pagination */
  #dragDropImageLibrary::after {
    content: '← Swipe to change pages →';
    display: block;
    text-align: center;
    color: #6c757d;
    font-size: 0.75rem;
    padding: 0.5rem;
    border-top: 1px solid #dee2e6;
    background: #f8f9fa;
  }
}
</style>

<script>
// Drag & Drop Gallery Builder Component
class DragDropGalleryBuilder {
  constructor() {
    this.modal = null;
    this.currentSlug = null;
    this.currentSectionId = null;
    
    // State management
    this.selectedImages = new Set();
    this.sections = [];
    this.images = [];
    this.currentPage = 1;
    this.totalPages = 1;
    
    // Drag & Drop state
    this.draggedImages = [];
    this.dragPreview = null;
    this.currentDropZone = null;
    this.isDragging = false;
    
    // Mobile-specific state
    this.isMobileDevice = MobileTouchHandler.isSupported();
    this.longPressSelection = new Set();
    this.mobileDragState = {
      isDragging: false,
      startElement: null,
      dragElement: null,
      preview: null
    };
    
    // Filters
    this.filters = {
      search: '',
      status: 'approved',
      context: 'all',
      sort: 'newest'
    };
    
    // Performance
    this.searchTimeout = null;
    this.requestCache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
    
    this.initializeElements();
    this.bindEvents();
  }

  initializeElements() {
    this.modal = new bootstrap.Modal(document.getElementById('dragDropGalleryModal'), {
      backdrop: 'static',
      keyboard: false
    });
    
    // Get DOM references
    this.elements = {
      searchInput: document.getElementById('dragDropSearchInput'),
      statusFilter: document.getElementById('dragDropStatusFilter'),
      contextFilter: document.getElementById('dragDropContextFilter'),
      sortSelect: document.getElementById('dragDropSortSelect'),
      
      selectAll: document.getElementById('dragDropSelectAll'),
      clearAll: document.getElementById('dragDropClearAll'),
      
      imageCount: document.getElementById('dragDropImageCount'),
      selectedCount: document.getElementById('dragDropSelectedCount'),
      sectionCount: document.getElementById('dragDropSectionCount'),
      
      imageGrid: document.getElementById('dragDropImageGrid'),
      pagination: document.getElementById('dragDropPagination'),
      paginationList: document.getElementById('dragDropPaginationList'),
      gallerySections: document.getElementById('dragDropGallerySections'),
      
      saveChanges: document.getElementById('dragDropSaveChanges')
    };
  }

  bindEvents() {
    // Filter controls
    this.elements.searchInput.addEventListener('input', (e) => {
      clearTimeout(this.searchTimeout);
      this.searchTimeout = setTimeout(() => {
        this.filters.search = e.target.value.trim();
        this.currentPage = 1;
        this.loadImages();
      }, 300);
    });

    this.elements.statusFilter.addEventListener('change', (e) => {
      this.filters.status = e.target.value;
      this.currentPage = 1;
      this.loadImages();
    });

    this.elements.contextFilter.addEventListener('change', (e) => {
      this.filters.context = e.target.value;
      this.currentPage = 1;
      this.loadImages();
    });

    this.elements.sortSelect.addEventListener('change', (e) => {
      this.filters.sort = e.target.value;
      this.currentPage = 1;
      this.loadImages();
    });

    // Selection controls
    this.elements.selectAll.addEventListener('click', () => {
      this.selectAllImages();
    });

    this.elements.clearAll.addEventListener('click', () => {
      this.clearAllSelection();
    });

    // Save changes
    this.elements.saveChanges.addEventListener('click', () => {
      this.saveChanges();
    });

    // Global drag events
    document.addEventListener('dragover', (e) => {
      if (this.isDragging) {
        e.preventDefault();
        this.handleDragOver(e);
      }
    });

    document.addEventListener('drop', (e) => {
      if (this.isDragging) {
        e.preventDefault();
        this.handleDrop(e);
      }
    });

    document.addEventListener('dragend', () => {
      this.handleDragEnd();
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (this.modal._isShown) {
        this.handleKeyboardShortcuts(e);
      }
    });

    // Mobile touch event listeners
    if (this.isMobileDevice) {
      this.bindMobileTouchEvents();
    }
  }

  // Public API
  open(options = {}) {
    const { slug } = options;
    
    if (!slug) {
      console.error('DragDropGalleryBuilder: slug is required');
      return;
    }
    
    this.currentSlug = slug;
    
    // Reset state
    this.selectedImages.clear();
    this.sections = [];
    this.images = [];
    this.currentPage = 1;
    
    this.modal.show();
    
    // Load initial data
    Promise.all([
      this.loadSections(),
      this.loadImages()
    ]).then(() => {
      this.updateCounters();
    }).catch(error => {
      console.error('Error loading gallery builder:', error);
      this.showError('Failed to load gallery data');
    });
  }

  async loadImages() {
    try {
      this.showImageLoading();
      
      const params = new URLSearchParams({
        page: this.currentPage,
        limit: 24,
        status: this.filters.status,
        context: this.filters.context,
        sort: this.filters.sort
      });
      
      if (this.filters.search) {
        params.set('search', this.filters.search);
      }
      
      const response = await fetch(`/api/model-gallery/${this.currentSlug}/library?${params}`);
      const result = await response.json();
      
      if (result.success) {
        this.images = result.data.images;
        this.totalPages = result.data.pagination.pages;
        this.renderImages();
        this.renderPagination(result.data.pagination);
        this.updateCounters();
      } else {
        throw new Error(result.message || 'Failed to load images');
      }
      
    } catch (error) {
      console.error('Error loading images:', error);
      this.showError('Failed to load images');
    }
  }

  async loadSections() {
    try {
      const response = await fetch(`/api/model-gallery/${this.currentSlug}/sections`);
      const result = await response.json();
      
      if (result.success) {
        this.sections = result.data.sections || [];
        
        // Load images for each section
        for (const section of this.sections) {
          try {
            const imagesResponse = await fetch(`/api/model-gallery/${this.currentSlug}/sections/${section.id}/images?limit=6`);
            const imagesResult = await imagesResponse.json();
            if (imagesResult.success) {
              section.images = imagesResult.data.images || [];
            } else {
              section.images = [];
            }
          } catch (error) {
            console.warn(`Failed to load images for section ${section.id}:`, error);
            section.images = [];
          }
        }
        
        this.renderSections();
        this.updateCounters();
      } else {
        throw new Error(result.message || 'Failed to load sections');
      }
      
    } catch (error) {
      console.error('Error loading sections:', error);
      this.showError('Failed to load sections');
    }
  }

  renderImages() {
    this.hideImageLoading();
    
    if (this.images.length === 0) {
      this.elements.imageGrid.innerHTML = `
        <div class="col-12 text-center py-5">
          <i class="fas fa-images text-muted" style="font-size: 3rem;"></i>
          <h6 class="text-muted mt-3">No Images Found</h6>
          <p class="text-muted">Try adjusting your filters or search terms.</p>
        </div>
      `;
      return;
    }

    this.elements.imageGrid.innerHTML = this.images.map(img => {
      const isSelected = this.selectedImages.has(img.filename);
      const isDisabled = img.in_section;
      
      return `
        <div class="col-lg-3 col-md-4 col-sm-6 col-6">
          <div class="drag-image-tile ${isSelected ? 'selected' : ''} ${isDisabled ? 'drag-disabled' : ''}"
               data-filename="${img.filename}"
               data-id="${img.id}"
               data-status="${img.moderation_status}"
               data-context="${img.usage_intent}"
               draggable="${!isDisabled}"
               tabindex="0"
               role="button"
               aria-label="Image ${img.filename}"
               aria-selected="${isSelected}">
            
            <div class="select-indicator">
              ${isSelected ? '<i class="fas fa-check"></i>' : ''}
            </div>
            
            <img src="/uploads/${encodeURIComponent(this.currentSlug)}/public/gallery/${encodeURIComponent(img.filename)}" 
                 class="w-100" 
                 style="height: 120px; object-fit: cover;"
                 alt="${img.filename}"
                 loading="lazy">
            
            <div class="status-badges">
              <span class="badge status-badge status-badge-${img.moderation_status}">${img.moderation_status}</span>
              ${img.usage_intent !== 'public_site' ? 
                `<span class="badge status-badge context-badge-${img.usage_intent}">${img.usage_intent}</span>` : ''}
            </div>
            
            ${isDisabled ? '<div class="position-absolute top-50 start-50 translate-middle"><span class="badge bg-secondary">In Gallery</span></div>' : ''}
          </div>
        </div>
      `;
    }).join('');

    // Bind events to new image tiles
    this.bindImageTileEvents();
  }

  renderSections() {
    if (this.sections.length === 0) {
      this.elements.gallerySections.innerHTML = `
        <div class="p-4 text-center text-muted">
          <i class="fas fa-layer-group" style="font-size: 2rem;"></i>
          <h6 class="mt-3">No Gallery Sections</h6>
          <p class="small">Create sections in the main gallery manager first.</p>
        </div>
      `;
      return;
    }

    this.elements.gallerySections.innerHTML = this.sections.map(section => `
      <div class="gallery-section-card" data-section-id="${section.id}">
        <div class="section-header">
          <div class="d-flex justify-content-between align-items-center">
            <h6 class="mb-0">${section.title}</h6>
            <div class="d-flex gap-1">
              <span class="badge bg-light text-dark">${section.images?.length || 0} images</span>
              ${section.is_visible ? 
                '<span class="badge bg-success">Public</span>' : 
                '<span class="badge bg-warning">Private</span>'}
            </div>
          </div>
        </div>
        
        <div class="section-content">
          <div class="gallery-drop-zone" data-section-id="${section.id}">
            <div class="drop-message">
              <i class="fas fa-cloud-upload-alt mb-2" style="font-size: 1.5rem;"></i>
              <div>Drop images here to add to<br><strong>${section.title}</strong></div>
            </div>
          </div>
          
          ${section.images && section.images.length > 0 ? `
            <div class="section-images">
              ${section.images.slice(0, 6).map(img => `
                <div class="section-image">
                  <img src="/uploads/${encodeURIComponent(this.currentSlug)}/public/gallery/${encodeURIComponent(img.filename)}" 
                       class="w-100 h-100" 
                       style="object-fit: cover;"
                       alt="${img.filename}"
                       title="${img.filename}">
                </div>
              `).join('')}
              ${section.images.length > 6 ? `
                <div class="section-image d-flex align-items-center justify-content-center bg-light">
                  <small class="text-muted">+${section.images.length - 6}</small>
                </div>
              ` : ''}
            </div>
          ` : ''}
        </div>
      </div>
    `).join('');

    // Bind drop zone events
    this.bindDropZoneEvents();
  }

  bindImageTileEvents() {
    this.elements.imageGrid.querySelectorAll('.drag-image-tile').forEach(tile => {
      // Selection events
      tile.addEventListener('click', (e) => {
        if (!tile.classList.contains('drag-disabled')) {
          this.toggleImageSelection(tile.dataset.filename);
        }
      });

      // Double-click to preview image in lightbox
      tile.addEventListener('dblclick', (e) => {
        e.preventDefault();
        if (!tile.classList.contains('drag-disabled')) {
          this.openImagePreview(tile.dataset.filename);
        }
      });

      // Drag events
      tile.addEventListener('dragstart', (e) => {
        if (!tile.classList.contains('drag-disabled')) {
          this.handleDragStart(e, tile);
        }
      });

      // Keyboard events
      tile.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          if (!tile.classList.contains('drag-disabled')) {
            this.toggleImageSelection(tile.dataset.filename);
          }
        }
      });
    });
  }

  bindDropZoneEvents() {
    this.elements.gallerySections.querySelectorAll('.gallery-drop-zone').forEach(zone => {
      zone.addEventListener('dragenter', (e) => {
        this.handleDragEnter(e, zone);
      });

      zone.addEventListener('dragleave', (e) => {
        this.handleDragLeave(e, zone);
      });
    });
  }

  // Drag & Drop handlers
  handleDragStart(e, tile) {
    this.isDragging = true;
    
    // If the dragged image isn't selected, select it
    const filename = tile.dataset.filename;
    if (!this.selectedImages.has(filename)) {
      this.selectedImages.clear();
      this.selectedImages.add(filename);
      this.updateImageSelection();
    }
    
    // Set drag data
    this.draggedImages = Array.from(this.selectedImages);
    
    // Create drag preview
    this.createDragPreview(tile);
    
    // Visual feedback
    tile.classList.add('dragging');
    
    // Set drag effect
    e.dataTransfer.effectAllowed = 'copy';
    e.dataTransfer.setData('text/plain', ''); // Required for drag to work
  }

  handleDragOver(e) {
    if (this.dragPreview) {
      // Update drag preview position
      this.dragPreview.style.left = (e.clientX + 10) + 'px';
      this.dragPreview.style.top = (e.clientY + 10) + 'px';
    }
  }

  handleDragEnter(e, zone) {
    e.preventDefault();
    
    if (this.currentDropZone) {
      this.currentDropZone.classList.remove('drop-active', 'drop-valid', 'drop-invalid');
    }
    
    this.currentDropZone = zone;
    zone.classList.add('drop-active');
    
    // Validate drop based on section type
    const sectionId = parseInt(zone.dataset.sectionId);
    const section = this.sections.find(s => s.id === sectionId);
    
    if (this.canDropInSection(section)) {
      zone.classList.add('drop-valid');
      zone.querySelector('.drop-message').innerHTML = `
        <i class="fas fa-check-circle mb-2 text-success" style="font-size: 1.5rem;"></i>
        <div>Add ${this.draggedImages.length} image${this.draggedImages.length > 1 ? 's' : ''} to<br><strong>${section.title}</strong></div>
      `;
    } else {
      zone.classList.add('drop-invalid');
      zone.querySelector('.drop-message').innerHTML = `
        <i class="fas fa-times-circle mb-2 text-danger" style="font-size: 1.5rem;"></i>
        <div>Cannot add to <strong>${section.title}</strong><br><small>Content not suitable for ${section.is_visible ? 'public' : 'private'} section</small></div>
      `;
    }
  }

  handleDragLeave(e, zone) {
    // Only reset if we're actually leaving the zone (not entering a child)
    if (!zone.contains(e.relatedTarget)) {
      zone.classList.remove('drop-active', 'drop-valid', 'drop-invalid');
      this.resetDropZoneMessage(zone);
      
      if (this.currentDropZone === zone) {
        this.currentDropZone = null;
      }
    }
  }

  async handleDrop(e) {
    if (!this.currentDropZone) return;
    
    const sectionId = parseInt(this.currentDropZone.dataset.sectionId);
    const section = this.sections.find(s => s.id === sectionId);
    
    if (!this.canDropInSection(section)) {
      this.showError(`Cannot add images to ${section.title}. Content not suitable for ${section.is_visible ? 'public' : 'private'} section.`);
      return;
    }
    
    try {
      // Show loading state
      this.currentDropZone.querySelector('.drop-message').innerHTML = `
        <div class="spinner-border spinner-border-sm text-primary mb-2"></div>
        <div>Adding ${this.draggedImages.length} image${this.draggedImages.length > 1 ? 's' : ''}...</div>
      `;
      
      // Add images to section
      const response = await fetch(`/api/model-gallery/${this.currentSlug}/sections/${sectionId}/images/batch`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          filenames: this.draggedImages
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        const summary = result.data.summary;
        
        // Show success message
        this.currentDropZone.querySelector('.drop-message').innerHTML = `
          <i class="fas fa-check-circle mb-2 text-success" style="font-size: 1.5rem;"></i>
          <div class="text-success">
            <strong>Added ${summary.added} image${summary.added !== 1 ? 's' : ''}!</strong>
            ${summary.skipped > 0 ? `<br><small>${summary.skipped} already in section</small>` : ''}
            ${summary.failed > 0 ? `<br><small class="text-warning">${summary.failed} failed</small>` : ''}
          </div>
        `;
        
        // Clear selection of successfully added images
        this.draggedImages.forEach(filename => {
          if (result.data.results.find(r => r.filename === filename && r.status === 'added')) {
            this.selectedImages.delete(filename);
          }
        });
        
        // Refresh data
        setTimeout(() => {
          this.resetDropZoneMessage(this.currentDropZone);
          this.loadSections();
          this.loadImages();
        }, 2000);
        
      } else {
        throw new Error(result.message || 'Failed to add images');
      }
      
    } catch (error) {
      console.error('Error dropping images:', error);
      this.showError('Failed to add images to gallery');
      this.resetDropZoneMessage(this.currentDropZone);
    }
  }

  handleDragEnd() {
    this.isDragging = false;
    
    // Remove drag preview
    if (this.dragPreview) {
      this.dragPreview.remove();
      this.dragPreview = null;
    }
    
    // Reset visual states
    this.elements.imageGrid.querySelectorAll('.drag-image-tile.dragging').forEach(tile => {
      tile.classList.remove('dragging');
    });
    
    if (this.currentDropZone) {
      this.currentDropZone.classList.remove('drop-active', 'drop-valid', 'drop-invalid');
      this.resetDropZoneMessage(this.currentDropZone);
      this.currentDropZone = null;
    }
    
    this.draggedImages = [];
  }

  createDragPreview(tile) {
    const preview = document.createElement('div');
    preview.className = 'drag-preview';
    
    const img = tile.querySelector('img');
    const previewImg = img.cloneNode();
    previewImg.className = 'preview-image';
    preview.appendChild(previewImg);
    
    if (this.selectedImages.size > 1) {
      const countBadge = document.createElement('div');
      countBadge.className = 'preview-count';
      countBadge.textContent = this.selectedImages.size;
      preview.appendChild(countBadge);
    }
    
    document.body.appendChild(preview);
    this.dragPreview = preview;
  }

  canDropInSection(section) {
    // Check if all selected images are suitable for this section
    return this.draggedImages.every(filename => {
      const image = this.images.find(img => img.filename === filename);
      if (!image) return false;
      
      if (section.is_visible) {
        // Public sections require approved content with public intent
        return ['approved', 'approved_blurred'].includes(image.moderation_status) && 
               image.usage_intent === 'public_site';
      } else {
        // Private sections allow all content
        return true;
      }
    });
  }

  resetDropZoneMessage(zone) {
    const sectionId = parseInt(zone.dataset.sectionId);
    const section = this.sections.find(s => s.id === sectionId);
    
    zone.querySelector('.drop-message').innerHTML = `
      <i class="fas fa-cloud-upload-alt mb-2" style="font-size: 1.5rem;"></i>
      <div>Drop images here to add to<br><strong>${section.title}</strong></div>
    `;
  }

  // Selection management
  toggleImageSelection(filename) {
    if (this.selectedImages.has(filename)) {
      this.selectedImages.delete(filename);
    } else {
      this.selectedImages.add(filename);
    }
    
    this.updateImageSelection();
    this.updateCounters();
  }

  selectAllImages() {
    this.images.filter(img => !img.in_section).forEach(img => {
      this.selectedImages.add(img.filename);
    });
    
    this.updateImageSelection();
    this.updateCounters();
  }

  clearAllSelection() {
    this.selectedImages.clear();
    this.updateImageSelection();
    this.updateCounters();
  }

  updateImageSelection() {
    this.elements.imageGrid.querySelectorAll('.drag-image-tile').forEach(tile => {
      const filename = tile.dataset.filename;
      const isSelected = this.selectedImages.has(filename);
      
      tile.classList.toggle('selected', isSelected);
      tile.setAttribute('aria-selected', isSelected);
      
      const indicator = tile.querySelector('.select-indicator');
      indicator.innerHTML = isSelected ? '<i class="fas fa-check"></i>' : '';
    });
  }

  // Utility methods
  updateCounters() {
    this.elements.imageCount.textContent = `${this.images.length} images`;
    this.elements.selectedCount.textContent = `${this.selectedImages.size} selected`;
    this.elements.sectionCount.textContent = this.sections.length;
  }

  showImageLoading() {
    this.elements.imageGrid.innerHTML = `
      <div class="col-12 text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading images...</span>
        </div>
        <p class="text-muted mt-2">Loading your image library...</p>
      </div>
    `;
  }

  hideImageLoading() {
    // Loading will be replaced by renderImages()
  }

  showError(message) {
    // Create a toast or alert for errors
    console.error('DragDropGalleryBuilder Error:', message);
    
    // Simple alert for now - could be enhanced with toast notifications
    alert(message);
  }

  renderPagination(pagination) {
    if (pagination.pages <= 1) {
      this.elements.pagination.style.display = 'none';
      return;
    }

    this.elements.pagination.style.display = 'block';
    
    const { page, pages } = pagination;
    let paginationHTML = '';

    // Previous button
    if (page > 1) {
      paginationHTML += `
        <li class="page-item">
          <a class="page-link" href="#" data-page="${page - 1}">
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
      `;
    }

    // Page numbers (show up to 5 pages)
    const startPage = Math.max(1, page - 2);
    const endPage = Math.min(pages, page + 2);

    for (let i = startPage; i <= endPage; i++) {
      paginationHTML += `
        <li class="page-item ${i === page ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>
      `;
    }

    // Next button
    if (page < pages) {
      paginationHTML += `
        <li class="page-item">
          <a class="page-link" href="#" data-page="${page + 1}">
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
      `;
    }

    this.elements.paginationList.innerHTML = paginationHTML;

    // Bind pagination clicks
    this.elements.paginationList.querySelectorAll('a[data-page]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        this.currentPage = parseInt(link.dataset.page);
        this.loadImages();
      });
    });
  }

  handleKeyboardShortcuts(e) {
    // Ctrl/Cmd + A: Select all
    if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
      e.preventDefault();
      this.selectAllImages();
    }
    
    // Escape: Clear selection
    if (e.key === 'Escape') {
      this.clearAllSelection();
    }
  }

  // Mobile touch event handlers
  bindMobileTouchEvents() {
    // Listen for mobile touch gestures
    document.addEventListener('mobile-tap', (e) => {
      this.handleMobileTap(e);
    });

    document.addEventListener('mobile-longpress', (e) => {
      this.handleMobileLongPress(e);
    });

    document.addEventListener('mobile-swipe', (e) => {
      this.handleMobileSwipe(e);
    });

    document.addEventListener('mobile-doubletap', (e) => {
      this.handleMobileDoubleTap(e);
    });
  }

  handleMobileTap(e) {
    const target = e.detail.target;
    const tile = target.closest('.drag-image-tile');
    const dropZone = target.closest('.gallery-drop-zone');
    
    if (tile && !tile.classList.contains('drag-disabled')) {
      // Single tap selects/deselects image
      this.toggleImageSelection(tile.dataset.filename);
      
      // Add mobile-specific visual feedback
      if (window.dragDropMobileHandler) {
        window.dragDropMobileHandler.hapticFeedback('light');
      }
    } else if (dropZone && this.mobileDragState.isDragging) {
      // Tap drop zone while dragging completes the drop
      this.handleMobileDrop(dropZone);
    }
  }

  handleMobileLongPress(e) {
    const target = e.detail.target;
    const tile = target.closest('.drag-image-tile');
    
    if (tile && !tile.classList.contains('drag-disabled')) {
      // Long press starts drag mode on mobile
      this.startMobileDrag(tile);
      
      // Heavy haptic feedback for drag start
      if (window.dragDropMobileHandler) {
        window.dragDropMobileHandler.hapticFeedback('heavy');
      }
    }
  }

  handleMobileSwipe(e) {
    const { direction, target } = e.detail;
    
    if (direction === 'left' || direction === 'right') {
      // Horizontal swipe in image library changes page
      if (target.closest('#dragDropImageLibrary')) {
        if (direction === 'left' && this.currentPage < this.totalPages) {
          this.currentPage++;
          this.loadImages();
        } else if (direction === 'right' && this.currentPage > 1) {
          this.currentPage--;
          this.loadImages();
        }
      }
    }
  }

  handleMobileDoubleTap(e) {
    const target = e.detail.target;
    const tile = target.closest('.drag-image-tile');
    
    if (tile && !tile.classList.contains('drag-disabled')) {
      // Double tap opens lightbox preview
      this.openImagePreview(tile.dataset.filename);
    }
  }

  startMobileDrag(tile) {
    // Ensure the dragged image is selected
    const filename = tile.dataset.filename;
    if (!this.selectedImages.has(filename)) {
      this.selectedImages.clear();
      this.selectedImages.add(filename);
      this.updateImageSelection();
    }

    this.mobileDragState.isDragging = true;
    this.mobileDragState.startElement = tile;
    this.mobileDragState.dragElement = tile;
    
    // Create mobile drag preview
    this.createMobileDragPreview(tile);
    
    // Highlight available drop zones
    this.highlightMobileDropZones();
    
    // Show mobile drag instructions
    this.showMobileDragInstructions();
  }

  createMobileDragPreview(tile) {
    const selectedCount = this.selectedImages.size;
    const preview = document.createElement('div');
    preview.className = 'mobile-drag-preview';
    preview.innerHTML = `
      <div class="preview-thumbnail">
        ${tile.querySelector('.tile-image').outerHTML}
        ${selectedCount > 1 ? `<div class="preview-badge">${selectedCount}</div>` : ''}
      </div>
      <div class="preview-text">
        <i class="fas fa-hand-point-up me-1"></i>
        Tap a gallery section to add ${selectedCount > 1 ? `${selectedCount} images` : 'image'}
      </div>
    `;
    
    document.body.appendChild(preview);
    this.mobileDragState.preview = preview;
    
    // Animate preview appearance
    requestAnimationFrame(() => {
      preview.style.opacity = '1';
      preview.style.transform = 'scale(1)';
    });
  }

  highlightMobileDropZones() {
    const dropZones = this.elements.gallerySections.querySelectorAll('.gallery-drop-zone');
    dropZones.forEach(zone => {
      zone.classList.add('mobile-drop-active');
    });
  }

  showMobileDragInstructions() {
    const instruction = document.createElement('div');
    instruction.className = 'mobile-drag-instruction';
    instruction.innerHTML = `
      <div class="instruction-content">
        <i class="fas fa-info-circle me-2"></i>
        Tap a gallery section to add images, or tap outside to cancel
        <button class="btn btn-sm btn-outline-light ms-2" onclick="window.dragDropGalleryBuilder.cancelMobileDrag()">
          Cancel
        </button>
      </div>
    `;
    
    this.elements.modal.appendChild(instruction);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (instruction.parentNode) {
        instruction.remove();
      }
    }, 5000);
  }

  handleMobileDrop(dropZone) {
    if (!this.mobileDragState.isDragging) return;
    
    const sectionId = dropZone.dataset.sectionId;
    const selectedFilenames = Array.from(this.selectedImages);
    
    // Perform the drop operation
    this.addImagesToSection(sectionId, selectedFilenames);
    
    // Complete mobile drag
    this.completeMobileDrag();
    
    // Success haptic feedback
    if (window.dragDropMobileHandler) {
      window.dragDropMobileHandler.hapticFeedback('success');
    }
  }

  cancelMobileDrag() {
    this.completeMobileDrag();
    
    // Cancel haptic feedback
    if (window.dragDropMobileHandler) {
      window.dragDropMobileHandler.hapticFeedback('light');
    }
  }

  completeMobileDrag() {
    // Clean up mobile drag state
    this.mobileDragState.isDragging = false;
    this.mobileDragState.startElement = null;
    this.mobileDragState.dragElement = null;
    
    // Remove preview
    if (this.mobileDragState.preview) {
      this.mobileDragState.preview.remove();
      this.mobileDragState.preview = null;
    }
    
    // Remove drop zone highlights
    const dropZones = this.elements.gallerySections.querySelectorAll('.gallery-drop-zone');
    dropZones.forEach(zone => {
      zone.classList.remove('mobile-drop-active');
    });
    
    // Remove instruction
    const instruction = this.elements.modal.querySelector('.mobile-drag-instruction');
    if (instruction) {
      instruction.remove();
    }
  }

  async saveChanges() {
    // For now, just close the modal since changes are saved in real-time
    this.modal.hide();
    
    // Refresh the main gallery page if available
    if (typeof window.loadSections === 'function') {
      window.loadSections();
    }
  }

  openImagePreview(filename) {
    const imageIndex = this.images.findIndex(img => img.filename === filename);
    if (imageIndex === -1) return;
    
    if (window.openAdvancedImageLightbox) {
      window.openAdvancedImageLightbox({
        images: this.images,
        currentIndex: imageIndex,
        slug: this.currentSlug,
        sectionId: null // No specific section for drag-drop builder
      });
    }
  }
}

// Initialize the drag & drop gallery builder when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  window.dragDropGalleryBuilder = new DragDropGalleryBuilder();
  
  // Initialize mobile touch handler for drag-drop interactions
  if (MobileTouchHandler.isSupported()) {
    window.dragDropMobileHandler = new MobileTouchHandler({
      enableSwipeNavigation: true,
      enablePinchZoom: false,
      enableHapticFeedback: true,
      enableSwipeToSelect: true
    });
  }
});

// Utility function for other components to use
window.openDragDropGalleryBuilder = function(options) {
  if (window.dragDropGalleryBuilder) {
    window.dragDropGalleryBuilder.open(options);
  } else {
    console.error('DragDropGalleryBuilder not initialized');
  }
};
</script>