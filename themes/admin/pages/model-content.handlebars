<div class="d-flex justify-content-between align-items-center mb-3">
  <h3 class="mb-0"><i class="fas fa-file-alt me-2"></i>Content Manager — {{model.name}}</h3>
  <a class="btn btn-outline-secondary" href="/{{model.slug}}/admin"><i class="fas fa-arrow-left me-2"></i>Back to Dashboard</a>
  </div>

<div class="row g-3">
  <div class="col-12 col-lg-3">
    <div class="card">
      <div class="card-header bg-white"><strong>Pages</strong></div>
      <div class="list-group list-group-flush" id="page_list"><div class="list-group-item">Loading…</div></div>
    </div>
  </div>
  <div class="col-12 col-lg-6">
    <div class="card">
      <div class="card-header bg-white"><strong>Fields</strong></div>
      <div class="card-body" id="fields_container">
        <div class="text-muted">Pick a page to load fields…</div>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-3">
    <div class="card">
      <div class="card-header bg-white"><strong>Audit</strong></div>
      <div class="card-body" id="audit_container">
        <div class="text-muted">Audit trail will appear here…</div>
      </div>
    </div>
  </div>
</div>

<script>
  (function(){
    let slug = {{{json model.slug}}};
    if (!slug || slug === 'null' || slug === 'undefined') {
      const parts = window.location.pathname.split('/').filter(Boolean);
      // expect /:slug/admin/content → slug is parts[0]
      if (parts.length >= 1) slug = parts[0];
    }
    let currentPageType = 1;
    const pageList = document.getElementById('page_list');
    const fields = document.getElementById('fields_container');
    const audit = document.getElementById('audit_container');
    const PAGE_NAMES = {1:'Home',2:'About',3:'Gallery',4:'Rates',5:'Contact'};

    function esc(v){
      const s = ((v ?? '') + '');
      return s
        .replace(/&/g,'&amp;')
        .replace(/</g,'&lt;')
        .replace(/>/g,'&gt;')
        .replace(/`/g,'&#96;')
        .replace(/"/g,'&quot;')
        .replace(/'/g,'&#39;');
    }

    async function loadPages(){
      try{
        const r = await fetch(`/api/model-content/${encodeURIComponent(slug)}/pages`);
        const d = await r.json();
        if (!d || d.success !== true){
          pageList.innerHTML = `<div class=\"list-group-item text-danger\">Failed to load pages</div>`;
          console.error('Content pages load failed', d);
          return;
        }
        const ids = d.data.pages || [1,2,3,4,5];
        pageList.innerHTML = ids.map((id,idx)=>`<button class="list-group-item list-group-item-action ${idx===0?'active':''}" data-id="${id}">${PAGE_NAMES[id]||('Page '+id)}</button>`).join('');
        // bind
        pageList.querySelectorAll('button[data-id]').forEach(btn => {
          btn.addEventListener('click', () => {
            pageList.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            loadPage(parseInt(btn.getAttribute('data-id')));
          });
        });
        // initial load
        const first = pageList.querySelector('button[data-id]');
        if (first){ currentPageType = parseInt(first.getAttribute('data-id')); loadPage(currentPageType); }
      }catch(e){ pageList.innerHTML = '<div class="list-group-item text-danger">Failed to load</div>'; }
    }

    async function loadPage(pageTypeId){
      currentPageType = pageTypeId;
      fields.innerHTML = '<div class="text-muted">Loading…</div>';
      const res = await fetch(`/api/model-content/${encodeURIComponent(slug)}/pages/${pageTypeId}`);
      const data = await res.json();
      if(!data.success){ fields.innerHTML = `<div class="text-danger">${data.message||'Failed to load'}</div>`; return; }
      const items = data.data.items || [];
      if (!items.length) { fields.innerHTML = '<div class="text-muted">No fields yet for this page.</div>'; return; }
      fields.innerHTML = items.map(it => {
        const val = esc(it.content_value);
        const label = esc(it.label || it.content_key);
        const inputType = (it.input_type || it.content_type || 'text');
        const requiredStar = it.is_required ? ' <span class=\\"text-danger\\">*</span>' : '';
        if (inputType === 'html'){
          return `
            <div class=\"mb-3\">
              <label class=\"form-label\">${label}${requiredStar} <span class=\"badge bg-info\">HTML</span></label>
              <div class=\"rt-editor border rounded\" data-key=\"${it.content_key}\" style=\"min-height:140px\"></div>
              <div class=\"d-flex align-items-center justify-content-between mt-1\">
                <small class=\"text-muted\">${esc(it.help_text||'Rich text')}</small>
                <small class=\"text-muted save-status\" data-key=\"${it.content_key}\"></small>
              </div>
            </div>
          `;
        }
        return `
          <div class=\"mb-3\">
            <label class=\"form-label\">${label}${requiredStar}</label>
            <textarea class=\"form-control field-input\" data-key=\"${it.content_key}\" rows=\"3\">${val}</textarea>
            <div class=\"d-flex align-items-center justify-content-between mt-1\">
              <small class=\"text-muted\">${esc(it.help_text||inputType)}</small>
              <small class=\"text-muted save-status\" data-key=\"${it.content_key}\"></small>
            </div>
          </div>
        `;
      }).join('');
      await setupRichText(items);
      bindAutosave();
      loadAudit();
    }

    async function ensureQuill(){
      if (window.Quill) return true;
      // load CSS
      const link = document.createElement('link'); link.rel='stylesheet'; link.href='https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.snow.css';
      document.head.appendChild(link);
      await new Promise(res=>link.onload=res);
      // load JS
      const s = document.createElement('script'); s.src='https://cdn.jsdelivr.net/npm/quill@1.3.7/dist/quill.min.js';
      document.body.appendChild(s);
      await new Promise(res=>s.onload=res);
      return true;
    }

    function setStatus(key, text, cls='text-muted'){
      const el = fields.querySelector(`.save-status[data-key="${key}"]`);
      if (el) { el.className = `save-status ${cls}`; el.textContent = text; }
    }

    async function setupRichText(items){
      const hasHtml = (items||[]).some(it => (it.content_type||'text') === 'html');
      if (!hasHtml) return;
      await ensureQuill();
      fields.querySelectorAll('.rt-editor').forEach((el, idx) => {
        const key = el.getAttribute('data-key');
        const item = items.find(i => i.content_key === key) || {};
        const initial = (item.content_value||'');
        const q = new Quill(el, { theme: 'snow' });
        q.root.innerHTML = initial;
        let t = null; let saving = false;
        q.on('text-change', () => {
          clearTimeout(t); t = setTimeout(async () => {
            if (saving) return; saving = true;
            const html = q.root.innerHTML;
            setStatus(key, 'Saving…');
            const body = { content_value: html, reason: 'Model admin inline edit', content_type: 'html' };
            const r = await fetch(`/api/model-content/${encodeURIComponent(slug)}/pages/${currentPageType}/${encodeURIComponent(key)}`, {
              method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
            });
            const d = await r.json(); saving = false;
            if (!d.success) { notify('danger', d.message||'Save failed'); setStatus(key, 'Error', 'text-danger'); return; }
            setStatus(key, 'Saved', 'text-success'); loadAudit();
          }, 800);
        });
      });
    }

    function bindAutosave(){
      const REASON = 'Model admin inline edit';
      fields.querySelectorAll('.field-input').forEach(el => {
        let t = null; let saving = false;
        el.addEventListener('input', () => {
          clearTimeout(t); t = setTimeout(async () => {
            if (saving) return; saving = true;
            const key = el.getAttribute('data-key');
            setStatus(key, 'Saving…');
            const body = { content_value: el.value, reason: REASON, content_type: 'text' };
            const r = await fetch(`/api/model-content/${encodeURIComponent(slug)}/pages/${currentPageType}/${encodeURIComponent(key)}`, {
              method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
            });
            const d = await r.json();
            saving = false;
            if (!d.success) { notify('danger', d.message||'Save failed'); setStatus(key, 'Error', 'text-danger'); return; }
            setStatus(key, 'Saved', 'text-success');
            loadAudit();
          }, 600);
        });
      });
    }

    async function loadAudit(page=1){
      const r = await fetch(`/api/model-content/${encodeURIComponent(slug)}/audit?page=${page}&limit=10`);
      const d = await r.json();
      if (!d.success) { audit.innerHTML = `<div class="text-danger">${d.message||'Failed to load'}</div>`; return; }
      const rows = d.data.audit || [];
      audit.innerHTML = rows.map(row => `
        <div class=\"border rounded p-2 mb-2\">
          <div class=\"small d-flex align-items-center justify-content-between\">
            <span><strong>${row.content_key}</strong> — ${new Date(row.created_at).toLocaleString()}</span>
            <button class=\"btn btn-sm btn-outline-secondary btn-rollback\" data-id=\"${row.id}\">Rollback</button>
          </div>
          <div class=\"text-muted small\">Reason: ${row.reason||'—'}</div>
        </div>
      `).join('') || '<div class=\"text-muted\">No audit yet</div>';
      audit.querySelectorAll('.btn-rollback').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.getAttribute('data-id');
          const r = await fetch(`/api/model-content/${encodeURIComponent(slug)}/rollback`, {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ log_id: parseInt(id), reason: 'admin-action' })
          });
          const resp = await r.json();
          if (!resp.success) { notify('danger', resp.message||'Rollback failed'); return; }
          notify('success', 'Rolled back');
          loadPage(currentPageType);
        });
      });
    }

    // initial load
    loadPages();
  })();
</script>

