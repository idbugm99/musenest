<div class="d-flex justify-content-between align-items-center mb-3">
  <h3 class="mb-0"><i class="fas fa-images me-2"></i>Gallery Manager — {{model.name}}</h3>
  <a class="btn btn-outline-secondary" href="/admin"><i class="fas fa-arrow-left me-2"></i>Back to Dashboard</a>
</div>

<div class="row g-3">
  <div class="col-12 col-lg-4">
    <div class="card">
      <div class="card-header bg-white"><strong>Create Section</strong></div>
      <div class="card-body">
        <div class="mb-2">
          <label class="form-label">Title</label>
          <input id="sec_title" class="form-control" placeholder="e.g., Portfolio" />
        </div>
        <div class="mb-2">
          <label class="form-label">Layout</label>
          <select id="sec_layout" class="form-select">
            <option value="grid">Grid</option>
            <option value="masonry">Masonry</option>
            <option value="carousel">Carousel</option>
            <option value="lightbox_grid">Lightbox Grid</option>
          </select>
        </div>
        <button id="btn_create_section" class="btn btn-primary w-100">Create Section</button>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-8">
    <div class="card">
      <div class="card-header bg-white d-flex align-items-center justify-content-between">
        <strong>Sections</strong>
        <input id="search_sections" class="form-control form-control-sm" placeholder="Search" style="max-width:200px" />
      </div>
      <div class="card-body" id="sections_list">
        <div class="text-muted">Loading…</div>
      </div>
    </div>
  </div>
</div>

<script>
  (function(){
    const slug = {{json model.slug}};
    // File picker modal state
    let filePickerModalInstance = null;
    let filePickerLastFiles = [];
    let filePickerTargetInput = null;
    const listEl = document.getElementById('sections_list');
    const searchEl = document.getElementById('search_sections');
    const createBtn = document.getElementById('btn_create_section');
    const titleEl = document.getElementById('sec_title');
    const layoutEl = document.getElementById('sec_layout');
    async function load(page=1){
      const q = searchEl.value ? `&search=${encodeURIComponent(searchEl.value)}` : '';
      const res = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections?page=${page}&limit=20${q}`);
      const data = await res.json();
      if(!data.success){ listEl.innerHTML = `<div class="text-danger">${data.message||'Failed to load'}</div>`; return; }
      const sections = data.data.sections || [];
      if(!sections.length){ listEl.innerHTML = '<div class="text-muted">No sections yet.</div>'; return; }
      listEl.innerHTML = sections.map(s => `
        <div class="border rounded p-2 mb-2">
          <div class="d-flex align-items-center justify-content-between">
            <div>
              <div class="fw-bold">${s.title}</div>
              <div class="text-muted small">${s.layout_type} · ${s.is_visible ? 'Visible' : 'Hidden'}</div>
            </div>
            <div>
              <button class="btn btn-sm btn-outline-secondary me-2 btn-rename" data-id="${s.id}">Rename</button>
              <button class="btn btn-sm btn-outline-warning me-2 btn-toggle" data-id="${s.id}" data-visible="${s.is_visible ? 1 : 0}">${s.is_visible ? 'Hide' : 'Show'}</button>
              <button class="btn btn-sm btn-outline-primary btn-manage" data-id="${s.id}">Manage Images</button>
            </div>
          </div>
          <div class="mt-2 section-images" id="section_${s.id}_images"></div>
        </div>
      `).join('');

      // Bind actions
      listEl.querySelectorAll('.btn-rename').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.getAttribute('data-id');
          const currentTitle = btn.closest('.border').querySelector('.fw-bold').textContent.trim();
          const next = prompt('New title', currentTitle);
          if (!next || next === currentTitle) return;
          const res = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}`, {
            method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ title: next })
          });
          const data = await res.json();
          if (!data.success) { alert(data.message||'Failed to rename'); return; }
          await load();
        });
      });

      listEl.querySelectorAll('.btn-toggle').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.getAttribute('data-id');
          const visible = btn.getAttribute('data-visible') === '1';
          const res = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/visibility`, {
            method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ is_visible: !visible })
          });
          const data = await res.json();
          if (!data.success) { alert(data.message||'Failed to toggle'); return; }
          await load();
        });
      });

      listEl.querySelectorAll('.btn-manage').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.getAttribute('data-id');
          const container = document.getElementById(`section_${id}_images`);
          container.innerHTML = '<div class="text-muted">Loading images…</div>';
          const res = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/images`);
          const data = await res.json();
          if (!data.success) { container.innerHTML = `<div class="text-danger">${data.message||'Failed to load images'}</div>`; return; }
          const images = data.data.images || [];
          if (!images.length) { container.innerHTML = '<div class="text-muted">No images in this section.</div>'; return; }
          container.innerHTML = `
            <div class="d-flex gap-2 align-items-center mb-2">
              <input class="form-control form-control-sm" id="add_filename_${id}" placeholder="/uploads/${slug}/public/gallery/filename.jpg" />
              <button class="btn btn-sm btn-secondary" id="btn_pick_${id}" data-id="${id}"><i class=\"fas fa-folder-open\"></i> Browse</button>
              <label class="btn btn-sm btn-outline-primary mb-0">
                <i class=\"fas fa-upload\"></i> Upload
                <input type="file" id="file_upload_${id}" accept="image/*" style="display:none" />
              </label>
              <button class="btn btn-sm btn-primary" id="btn_add_${id}" data-id="${id}"><i class=\"fas fa-plus\"></i> Add</button>
            </div>
            <div class="row row-cols-2 row-cols-md-3 g-2 images-grid" data-section-id="${id}">
              ${images.map((img, idx) => `
                <div class="col">
                  <div class="border rounded p-2 draggable-card" draggable="true" data-id="${img.id}" data-index="${idx}">
                    <div class="d-flex align-items-center justify-content-between">
                      <div class="small text-truncate" title="${img.filename}">
                        <i class=\"fas fa-grip-vertical me-1 text-muted\"></i>${img.filename}
                      </div>
                      <button class="btn btn-sm btn-outline-secondary btn-toggle-image" data-id="${img.id}" data-active="${img.is_active ? 1 : 0}">${img.is_active ? 'Hide' : 'Show'}</button>
                    </div>
                    <div class="text-muted small mt-1">${img.is_active ? 'Visible' : 'Hidden'}</div>
                  </div>
                </div>
              `).join('')}
            </div>
          `;

          // bind add image
          const pickBtn = document.getElementById(`btn_pick_${id}`);
          const addBtn = document.getElementById(`btn_add_${id}`);
          const addInput = document.getElementById(`add_filename_${id}`);
          const fileInput = document.getElementById(`file_upload_${id}`);
          pickBtn.addEventListener('click', async () => {
            openFilePicker(addInput);
          });
          fileInput.addEventListener('change', async () => {
            const file = fileInput.files && fileInput.files[0];
            if (!file) return;
            const form = new FormData();
            form.append('image', file);
            const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/upload`, { method: 'POST', body: form });
            const d = await r.json();
            if (!d.success) { alert(d.message || 'Upload failed'); return; }
            // reload
            const rr = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/images`);
            const dd = await rr.json();
            if (!dd.success) { return; }
            renderImagesGrid(container, id, dd.data.images || []);
          });
          addBtn.addEventListener('click', async () => {
            const filename = (addInput.value || '').trim();
            if (!filename) { alert('Enter a filename/path'); return; }
            const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/images`, {
              method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ filename })
            });
            const d = await r.json();
            if (!d.success) { alert(d.message || 'Failed to add image'); return; }
            addInput.value = '';
            // reload images
            const rr = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/images`);
            const dd = await rr.json();
            if (!dd.success) { return; }
            const imgs = dd.data.images || [];
            renderImagesGrid(container, id, imgs);
          });

          // helper to render grid with bindings (for refresh)
          function renderImagesGrid(container, sectionId, imgs) {
            const grid = container.querySelector('.images-grid');
            grid.innerHTML = imgs.map((img, idx) => `
              <div class=\"col\">
                <div class=\"border rounded p-2 draggable-card\" draggable=\"true\" data-id=\"${img.id}\" data-index=\"${idx}\">
                  <div class=\"d-flex align-items-center justify-content-between\"> 
                    <div class=\"d-flex align-items-center text-truncate\" title=\"${img.filename}\" style=\"min-width:0\">
                      <img src=\"${(img.filename && img.filename.startsWith('/')) ? img.filename : '/uploads/${slug}/public/gallery/' + img.filename}\" alt=\"thumb\" class=\"me-2\" style=\"width:48px;height:48px;object-fit:cover;border-radius:4px\" onerror=\"this.style.visibility='hidden'\" />
                      <span class=\"small text-truncate\"><i class=\\\"fas fa-grip-vertical me-1 text-muted\\\"></i>${img.filename}</span>
                    </div>
                    <div class=\"d-flex align-items-center\">
                      <span class=\"badge ${statusBadgeClass(img.moderation_status)} me-2\">${img.moderation_status || 'pending'}</span>
                      <button class=\"btn btn-sm btn-outline-secondary btn-toggle-image\" data-id=\"${img.id}\" data-active=\"${img.is_active ? 1 : 0}\">${img.is_active ? 'Hide' : 'Show'}</button>
                    </div>
                  </div>
                  <div class=\"mt-2\">
                    <input class=\"form-control form-control-sm mb-1 input-caption\" data-id=\"${img.id}\" placeholder=\"Caption\" value=\"${(img.caption||'').replace(/\\\"/g,'&quot;')}\" />
                    <div class=\"d-flex align-items-center justify-content-between\">
                      <input class=\"form-control form-control-sm me-2 input-tags\" data-id=\"${img.id}\" placeholder=\"tags (comma)\" value=\"${(img.tags||'').replace(/\\\"/g,'&quot;')}\" />
                      <span class=\"text-muted small\">${img.is_active ? 'Visible' : 'Hidden'}</span>
                    </div>
                  </div>
                </div>
              </div>
            `).join('');
            // helper for badge class
            function statusBadgeClass(status){
              if (!status) return 'bg-secondary';
              switch(status){
                case 'approved': return 'bg-success';
                case 'approved_blurred': return 'bg-info';
                case 'flagged': return 'bg-warning text-dark';
                case 'rejected': return 'bg-danger';
                default: return 'bg-secondary';
              }
            }
            bindImageToggles(grid, sectionId);
            bindDragAndDrop(grid, sectionId);
          }

          function bindImageToggles(scope, sectionId) {
            scope.querySelectorAll('.btn-toggle-image').forEach(t => {
              t.addEventListener('click', async () => {
                const imgId = t.getAttribute('data-id');
                const active = t.getAttribute('data-active') === '1';
                const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/images/${imgId}/visibility`, {
                  method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ is_active: !active })
                });
                const d = await r.json();
                if (!d.success) { alert(d.message||'Failed to update'); return; }
                // refresh current grid
                const rr = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${sectionId}/images`);
                const dd = await rr.json();
                if (!dd.success) { return; }
                renderImagesGrid(container, sectionId, dd.data.images || []);
              });
            });
            // inline save caption/tags on blur
            scope.querySelectorAll('.input-caption, .input-tags').forEach(input => {
              input.addEventListener('blur', async () => {
                const imgId = input.getAttribute('data-id');
                const wrapper = input.closest('.draggable-card');
                const caption = wrapper.querySelector('.input-caption').value;
                const tags = wrapper.querySelector('.input-tags').value;
                const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/images/${imgId}`, {
                  method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ caption, tags })
                });
                const d = await r.json();
                if (!d.success) { console.warn('Failed to save caption/tags'); }
              });
            });
          }

          function bindDragAndDrop(grid, sectionId) {
            let draggingEl = null;
            grid.querySelectorAll('.draggable-card').forEach(card => {
              card.addEventListener('dragstart', (e) => {
                draggingEl = card;
                e.dataTransfer.effectAllowed = 'move';
                card.classList.add('opacity-50');
              });
              card.addEventListener('dragend', () => {
                if (draggingEl) draggingEl.classList.remove('opacity-50');
                draggingEl = null;
              });
              card.addEventListener('dragover', (e) => {
                e.preventDefault();
                const target = e.currentTarget;
                if (!draggingEl || draggingEl === target) return;
                const bounding = target.getBoundingClientRect();
                const offset = e.clientY - bounding.top;
                const parentCol = target.closest('.col');
                const draggingCol = draggingEl.closest('.col');
                if (offset < bounding.height / 2) {
                  parentCol.parentNode.insertBefore(draggingCol, parentCol);
                } else {
                  parentCol.parentNode.insertBefore(draggingCol, parentCol.nextSibling);
                }
              });
            });

            grid.addEventListener('drop', async (e) => {
              e.preventDefault();
              // Build new order
              const items = Array.from(grid.querySelectorAll('.draggable-card')).map((el, idx) => ({ id: parseInt(el.getAttribute('data-id')), order_index: idx }));
              const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/images/reorder`, {
                method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ section_id: sectionId, items })
              });
              const d = await r.json();
              if (!d.success) { alert(d.message||'Failed to reorder'); return; }
              // Re-render grid from server authoritative order
              renderImagesGrid(container, sectionId, d.data.images || []);
            });
          }

          // initial bindings
          const grid = container.querySelector('.images-grid');
          bindImageToggles(grid, id);
          bindDragAndDrop(grid, id);

          // bind image toggle
          container.querySelectorAll('.btn-toggle-image').forEach(t => {
            t.addEventListener('click', async () => {
              const imgId = t.getAttribute('data-id');
              const active = t.getAttribute('data-active') === '1';
              const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/images/${imgId}/visibility`, {
                method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ is_active: !active })
              });
              const d = await r.json();
              if (!d.success) { alert(d.message||'Failed to update'); return; }
              // refresh images
              const rr = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections/${id}/images`);
              const dd = await rr.json();
              if (!dd.success) { return; }
              const imgs = dd.data.images || [];
              container.innerHTML = `
                <div class=\"row row-cols-2 row-cols-md-3 g-2\">${imgs.map(img => `
                  <div class=\"col\"><div class=\"border rounded p-2\">
                    <div class=\"small text-truncate\" title=\"${img.filename}\">${img.filename}</div>
                    <div class=\"d-flex align-items-center justify-content-between mt-1\">
                      <span class=\"text-muted small\">${img.is_active ? 'Visible' : 'Hidden'}</span>
                      <button class=\"btn btn-sm btn-outline-secondary btn-toggle-image\" data-id=\"${img.id}\" data-active=\"${img.is_active ? 1 : 0}\">${img.is_active ? 'Hide' : 'Show'}</button>
                    </div>
                  </div></div>
                `).join('')}</div>`;
            });
          });
        });
      });
    }
    searchEl.addEventListener('input', () => load(1));
    createBtn.addEventListener('click', async () => {
      const title = titleEl.value.trim();
      const layout_type = layoutEl.value;
      if(!title){ alert('Please provide a title'); return; }
      const res = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/sections`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, layout_type })
      });
      const data = await res.json();
      if(!data.success){ alert(data.message||'Failed to create'); return; }
      titleEl.value='';
      await load(1);
    });
    load();

    // ---------- File Picker Modal ----------
    function ensureFilePickerModal() {
      let modalEl = document.getElementById('filePickerModal');
      if (modalEl) return modalEl;
      const wrapper = document.createElement('div');
      wrapper.innerHTML = `
      <div class="modal fade" id="filePickerModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title"><i class="fas fa-folder-open me-2"></i>Select a File</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="d-flex align-items-center mb-2">
                <input id="filePickerSearch" class="form-control" placeholder="Search files..." />
              </div>
              <div id="filePickerList" class="row row-cols-1 row-cols-md-2 g-2">
                <div class="col"><div class="text-muted">Loading…</div></div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>`;
      document.body.appendChild(wrapper.firstElementChild);
      return document.getElementById('filePickerModal');
    }

    function renderFileList(files) {
      const list = document.getElementById('filePickerList');
      if (!files.length) {
        list.innerHTML = '<div class="col"><div class="text-muted">No files found.</div></div>';
        return;
      }
      list.innerHTML = files.map(f => `
        <div class="col">
          <div class="border rounded p-2 d-flex align-items-center justify-content-between">
            <div class="text-truncate" title="${f.path}">${f.path}</div>
            <button class="btn btn-sm btn-primary" data-path="${f.path}">Select</button>
          </div>
        </div>
      `).join('');
      // bind selects
      list.querySelectorAll('button[data-path]').forEach(btn => {
        btn.addEventListener('click', () => {
          if (filePickerTargetInput) {
            filePickerTargetInput.value = btn.getAttribute('data-path');
          }
          if (filePickerModalInstance) filePickerModalInstance.hide();
        });
      });
    }

    async function loadFilePickerFiles() {
      const list = document.getElementById('filePickerList');
      list.innerHTML = '<div class="col"><div class="text-muted">Loading…</div></div>';
      try {
        const r = await fetch(`/api/model-gallery/${encodeURIComponent(slug)}/uploads-list?sub=public/gallery`);
        const d = await r.json();
        if (!d.success) { list.innerHTML = `<div class='col'><div class='text-danger'>${d.message||'Failed to load'}</div></div>`; return; }
        filePickerLastFiles = d.data.files || [];
        renderFileList(filePickerLastFiles);
      } catch (e) {
        list.innerHTML = '<div class="col"><div class="text-danger">Failed to load</div></div>';
      }
    }

    function openFilePicker(targetInput) {
      const modalEl = ensureFilePickerModal();
      // initialize bootstrap modal once
      if (!filePickerModalInstance) {
        // eslint-disable-next-line no-undef
        filePickerModalInstance = new bootstrap.Modal(modalEl);
        const searchEl = modalEl.querySelector('#filePickerSearch');
        searchEl.addEventListener('input', () => {
          const q = searchEl.value.toLowerCase();
          const filtered = filePickerLastFiles.filter(f => f.path.toLowerCase().includes(q));
          renderFileList(filtered);
        });
      }
      filePickerTargetInput = targetInput;
      loadFilePickerFiles();
      filePickerModalInstance.show();
    }
  })();
</script>

