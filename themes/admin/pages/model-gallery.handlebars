<style>
/* Drag and Drop Styles */
.sortable-section {
  transition: all 0.2s ease;
  cursor: grab;
}

.sortable-section:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transform: translateY(-1px);
}

.sortable-section.dragging {
  opacity: 0.5;
  transform: scale(0.95);
  cursor: grabbing;
}

.drag-handle {
  transition: color 0.2s ease;
}

.drag-handle:hover {
  color: #007bff !important;
}

.drag-placeholder {
  border: 2px dashed #007bff !important;
  background-color: rgba(0, 123, 255, 0.1) !important;
  animation: pulse-border 1.5s ease-in-out infinite;
}

@keyframes pulse-border {
  0% {
    border-color: #007bff;
    background-color: rgba(0, 123, 255, 0.1);
  }
  50% {
    border-color: #0056b3;
    background-color: rgba(0, 86, 179, 0.15);
  }
  100% {
    border-color: #007bff;
    background-color: rgba(0, 123, 255, 0.1);
  }
}

.sortable-section[draggable="true"] {
  cursor: grab;
}

.sortable-section[draggable="true"]:active {
  cursor: grabbing;
}
</style>

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <div>
      <h1 class="h3 mb-0">Gallery Manager</h1>
      <p class="text-muted mb-0">{{model.name}} • Manage gallery sections and images</p>
    </div>
    <div class="d-flex gap-2">
      <a href="/{{model.slug}}/admin" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
      </a>
    </div>
  </div>

  <!-- Create New Section -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="card-title mb-0">Create New Gallery Section</h5>
    </div>
    <div class="card-body">
      <form id="createSectionForm">
        <div class="row">
          <div class="col-md-4">
            <label for="sectionTitle" class="form-label">Section Title</label>
            <input type="text" class="form-control" id="sectionTitle" placeholder="e.g., Portfolio, Featured, etc." required>
          </div>
          <div class="col-md-4">
            <label for="sectionLayout" class="form-label">Layout Type</label>
            <select class="form-select" id="sectionLayout" required>
              <option value="grid">Grid</option>
              <option value="masonry">Masonry</option>
              <option value="carousel">Carousel</option>
              <option value="slider">Slider</option>
            </select>
          </div>
          <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-plus me-1"></i>Create Section
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Gallery Sections -->
  <div class="card">
    <div class="card-header">
      <h5 class="card-title mb-0">Gallery Sections</h5>
    </div>
    <div class="card-body">
      <div id="sectionsList">
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2 text-muted">Loading gallery sections...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modelSlug = '{{model.slug}}';
  
  // Initialize
  loadSections();
  bindEventListeners();

  async function loadSections() {
    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections?page=1&limit=1000`);
      const data = await response.json();
      
      if (data.success) {
        renderSections(data.data.sections || []);
      } else {
        showError('Failed to load sections: ' + (data.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error loading sections:', error);
      showError('Failed to load sections');
    }
  }

  function getPrivacyBadge(section) {
    const privacyStatus = section.privacy_status || 'public';
    const unapprovedCount = section.unapproved_count || 0;
    const blurredCount = section.blurred_count || 0;
    
    let badgeClass, icon, text, tooltip;
    
    switch (privacyStatus) {
      case 'paywall':
        badgeClass = 'bg-warning text-dark';
        icon = 'fas fa-lock';
        text = 'Paywall';
        tooltip = 'Members-only content behind paywall';
        break;
      case 'auth_required':
        badgeClass = 'bg-secondary';
        icon = 'fas fa-user-lock';
        text = 'Auth Required';
        tooltip = 'Requires authentication';
        break;
      case 'private':
        badgeClass = 'bg-danger';
        icon = 'fas fa-eye-slash';
        text = 'Private';
        tooltip = `Contains ${unapprovedCount} unapproved image(s)`;
        break;
      case 'public':
      default:
        if (blurredCount > 0) {
          badgeClass = 'bg-info';
          icon = 'fas fa-blur';
          text = 'Public+Blurred';
          tooltip = `Public gallery with ${blurredCount} blurred teaser(s)`;
        } else {
          badgeClass = 'bg-success';
          icon = 'fas fa-globe';
          text = 'Public';
          tooltip = 'Fully public gallery';
        }
        break;
    }
    
    return `<span class="badge ${badgeClass}" title="${tooltip}" style="text-align: center; width: 100%;">
              <i class="${icon} me-1"></i>${text}
            </span>`;
  }

  function renderSections(sections) {
    const container = document.getElementById('sectionsList');
    
    if (!sections || sections.length === 0) {
      container.innerHTML = `
        <div class="text-center py-5">
          <i class="fas fa-images fa-3x text-muted mb-3"></i>
          <h5 class="text-muted">No gallery sections yet</h5>
          <p class="text-muted">Create your first gallery section using the form above</p>
        </div>
      `;
      return;
    }

    container.innerHTML = sections.map(section => `
      <div class="card mb-3 sortable-section" data-section-id="${section.id}" data-sort-order="${section.sort_order || 0}" draggable="true">
        <div class="card-body">
          <div class="row align-items-center">
            <div class="col-auto">
              <div class="drag-handle" style="cursor: grab; color: #6c757d; font-size: 1.2rem; padding: 0.5rem;" title="Drag to reorder">
                <i class="fas fa-grip-vertical"></i>
              </div>
            </div>
            <div class="col">
              <h6 class="card-title mb-1">${section.title}</h6>
              <div class="d-flex align-items-center" style="gap: 8px;">
                <span class="badge bg-info" style="min-width: 80px; text-align: center; display: inline-block;">${section.layout_type}</span>
                <div style="min-width: 120px; display: inline-block;">${getPrivacyBadge(section)}</div>
                <small class="text-muted" style="margin-left: 8px;">${section.image_count || 0} images</small>
              </div>
            </div>
            <div class="col-auto text-end">
              <div class="btn-group btn-group-sm" role="group">
                <button class="btn ${section.is_visible ? 'btn-success' : 'btn-danger'} btn-toggle-visibility" data-id="${section.id}" data-visible="${section.is_visible ? 1 : 0}" title="Click to ${section.is_visible ? 'hide' : 'show'}">
                  <i class="fas fa-${section.is_visible ? 'eye' : 'eye-slash'} me-1"></i>${section.is_visible ? 'Visible' : 'Hidden'}
                </button>
                <a href="/${encodeURIComponent(modelSlug)}/admin/gallery/${section.id}" class="btn btn-outline-primary">
                  <i class="fas fa-images me-1"></i>Manage Images
                </a>
                <button class="btn btn-outline-secondary btn-edit" data-id="${section.id}" data-title="${section.title}" data-layout="${section.layout_type}">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-outline-danger btn-delete" data-id="${section.id}" data-title="${section.title}">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `).join('');

    // Bind section-specific event listeners
    bindSectionEventListeners();
  }

  function bindEventListeners() {
    // Create section form
    document.getElementById('createSectionForm').addEventListener('submit', handleCreateSection);
  }

  function bindSectionEventListeners() {
    // Edit section
    document.querySelectorAll('.btn-edit').forEach(btn => {
      btn.addEventListener('click', handleEditSection);
    });

    // Toggle visibility
    document.querySelectorAll('.btn-toggle-visibility').forEach(btn => {
      btn.addEventListener('click', handleToggleVisibility);
    });

    // Delete section
    document.querySelectorAll('.btn-delete').forEach(btn => {
      btn.addEventListener('click', handleDeleteSection);
    });

    // Initialize drag and drop
    initializeDragAndDrop();
  }

  async function handleCreateSection(e) {
    e.preventDefault();
    
    const title = document.getElementById('sectionTitle').value.trim();
    const layout = document.getElementById('sectionLayout').value;
    
    if (!title) {
      showWarning('Please enter a section title');
      return;
    }

    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, layout_type: layout })
      });

      const data = await response.json();
      
      if (data.success) {
        showSuccess('Section created successfully');
        document.getElementById('createSectionForm').reset();
        loadSections();
      } else {
        showError('Failed to create section: ' + (data.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error creating section:', error);
      showError('Failed to create section');
    }
  }

  async function handleEditSection(e) {
    const btn = e.target;
    const id = btn.getAttribute('data-id');
    const currentTitle = btn.getAttribute('data-title');
    const currentLayout = btn.getAttribute('data-layout');
    
    const newTitle = prompt('Enter new section title:', currentTitle);
    if (!newTitle || newTitle.trim() === '') return;
    
    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: newTitle.trim() })
      });

      const data = await response.json();
      
      if (data.success) {
        showSuccess('Section updated successfully');
        loadSections();
      } else {
        showError('Failed to update section: ' + (data.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error updating section:', error);
      showError('Failed to update section');
    }
  }


  async function handleToggleVisibility(e) {
    e.preventDefault();
    const btn = e.currentTarget;
    const id = btn.getAttribute('data-id');
    const currentVisible = btn.getAttribute('data-visible') === '1';
    
    if (!id || id === 'null') {
      showError('Invalid section ID');
      return;
    }
    
    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections/${id}/visibility`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ is_visible: !currentVisible })
      });

      const data = await response.json();
      
      if (data.success) {
        const newVisible = !currentVisible;
        showSuccess(`Section ${newVisible ? 'published' : 'hidden'} successfully`);
        
        // Update button immediately
        btn.setAttribute('data-visible', newVisible ? '1' : '0');
        btn.className = `btn ${newVisible ? 'btn-success' : 'btn-danger'} btn-toggle-visibility`;
        btn.title = `Click to ${newVisible ? 'hide' : 'show'}`;
        btn.innerHTML = `<i class="fas fa-${newVisible ? 'eye' : 'eye-slash'} me-1"></i>${newVisible ? 'Visible' : 'Hidden'}`;
      } else {
        showError('Failed to update section visibility: ' + (data.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error updating section visibility:', error);
      showError('Failed to update section visibility');
    }
  }

  async function handleDeleteSection(e) {
    const btn = e.target;
    const id = btn.getAttribute('data-id');
    const title = btn.getAttribute('data-title');
    
    if (!confirm(`Delete section "${title}"? This will also remove all associated images. This cannot be undone.`)) {
      return;
    }

    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections/${id}`, {
        method: 'DELETE'
      });

      const data = await response.json();
      
      if (data.success) {
        showSuccess('Section deleted successfully');
        loadSections();
      } else {
        showError('Failed to delete section: ' + (data.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error deleting section:', error);
      showError('Failed to delete section');
    }
  }

  // Utility functions for notifications
  function showSuccess(message) {
    console.log('✅ Success:', message);
    // Create a simple success notification
    const notification = document.createElement('div');
    notification.className = 'alert alert-success alert-dismissible fade show position-fixed';
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
      <i class="fas fa-check-circle me-2"></i>${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
  }

  function showError(message) {
    console.error('❌ Error:', message);
    // Create a simple error notification
    const notification = document.createElement('div');
    notification.className = 'alert alert-danger alert-dismissible fade show position-fixed';
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
      <i class="fas fa-exclamation-triangle me-2"></i>${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
  }

  function showWarning(message) {
    console.warn('⚠️ Warning:', message);
    // Create a simple warning notification
    const notification = document.createElement('div');
    notification.className = 'alert alert-warning alert-dismissible fade show position-fixed';
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
      <i class="fas fa-exclamation-triangle me-2"></i>${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(notification);
    
    // Auto-remove after 4 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 4000);
  }

  // Drag and Drop Functionality
  function initializeDragAndDrop() {
    const container = document.getElementById('sectionsList');
    let draggedElement = null;
    let placeholder = null;

    // Add dragstart and dragend listeners to sections (these need to be on the draggable element)
    document.querySelectorAll('.sortable-section').forEach(section => {
      section.addEventListener('dragstart', handleDragStart);
      section.addEventListener('dragend', handleDragEnd);
    });

    // Add drop zone listeners to the container (this handles the drop zone behavior)
    container.addEventListener('dragover', handleDragOver);
    container.addEventListener('dragenter', handleDragEnter);
    container.addEventListener('drop', handleDrop);

    function handleDragStart(e) {
      // Always drag the entire sortable section, not a child node
      draggedElement = e.currentTarget || e.target.closest('.sortable-section');
      if (!draggedElement) return;
      
      // Create placeholder
      placeholder = document.createElement('div');
      placeholder.className = 'card mb-3 drag-placeholder';
      placeholder.style.cssText = `
        height: ${draggedElement.offsetHeight}px;
        border: 2px dashed #007bff;
        background-color: rgba(0, 123, 255, 0.1);
        border-radius: 0.375rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #007bff;
        font-weight: 500;
      `;
      placeholder.innerHTML = '<i class="fas fa-arrows-alt me-2"></i>Drop section here';
      
      // Add dragging visual feedback
      draggedElement.style.opacity = '0.5';
      draggedElement.style.transform = 'scale(0.95)';
      
      // Update drag handle cursor
      const dragHandle = draggedElement.querySelector('.drag-handle');
      if (dragHandle) {
        dragHandle.style.cursor = 'grabbing';
      }

      e.dataTransfer.effectAllowed = 'move';
      try { e.dataTransfer.setData('text/plain', draggedElement.getAttribute('data-section-id') || ''); } catch(_) {}
    }

    function handleDragEnd(e) {
      // Reset visual feedback
      if (draggedElement) {
        draggedElement.style.opacity = '';
        draggedElement.style.transform = '';
        
        const dragHandle = draggedElement.querySelector('.drag-handle');
        if (dragHandle) {
          dragHandle.style.cursor = 'grab';
        }
      }
      
      // Remove placeholder
      if (placeholder && placeholder.parentNode) {
        placeholder.parentNode.removeChild(placeholder);
      }
      
      draggedElement = null;
      placeholder = null;
    }

    function handleDragOver(e) {
      e.preventDefault(); // Required to allow drop
      e.dataTransfer.dropEffect = 'move';
      
      // Handle visual feedback for dropping position
      const section = e.target.closest('.sortable-section');
      if (section && section !== draggedElement && placeholder) {
        const rect = section.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;
        
        if (e.clientY < midY) {
          container.insertBefore(placeholder, section);
        } else {
          container.insertBefore(placeholder, section.nextSibling);
        }
      }
    }

    function handleDragEnter(e) {
      e.preventDefault(); // Required to allow drop
      
      if (!placeholder || e.target === draggedElement) return;
      
      // Show placeholder when entering the drop zone
      const section = e.target.closest('.sortable-section');
      if (section && section !== draggedElement) {
        const rect = section.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;
        
        if (e.clientY < midY) {
          container.insertBefore(placeholder, section);
        } else {
          container.insertBefore(placeholder, section.nextSibling);
        }
      }
    }

    // Optional: Add visual feedback when hovering over drop zones
    function addDropZoneHighlight(element) {
      element.style.backgroundColor = 'rgba(0, 123, 255, 0.1)';
      element.style.borderColor = '#007bff';
    }
    
    function removeDropZoneHighlight(element) {
      element.style.backgroundColor = '';
      element.style.borderColor = '';
    }

    function handleDrop(e) {
      e.preventDefault();
      e.stopPropagation();
      const container = document.getElementById('sectionsList');
      if (!container || !draggedElement) return false;

      // Check if we're dropping on the placeholder
      if (e.target.classList.contains('drag-placeholder')) {
        // Replace the placeholder with the dragged element
        if (placeholder && placeholder.parentNode) {
          placeholder.parentNode.insertBefore(draggedElement, placeholder);
          placeholder.parentNode.removeChild(placeholder);
        }
      } else {
        // Original logic for dropping on sections
        const target = e.target.closest('.sortable-section');
        if (!target || target === draggedElement) return false;
        
        const rect = target.getBoundingClientRect();
        const before = e.clientY < rect.top + rect.height / 2;
        
        if (before) {
          container.insertBefore(draggedElement, target);
        } else {
          container.insertBefore(draggedElement, target.nextSibling);
        }
      }

      updateSectionOrder();

      // Rebind listeners to ensure subsequent drags work
      document.querySelectorAll('.sortable-section').forEach(section => {
        section.removeEventListener('dragstart', handleDragStart);
        section.removeEventListener('dragend', handleDragEnd);
        section.addEventListener('dragstart', handleDragStart);
        section.addEventListener('dragend', handleDragEnd);
      });

      return false;
    }
  }

  async function updateSectionOrder() {
    const sections = Array.from(document.querySelectorAll('.sortable-section'));
    const orderData = sections.map((section, index) => ({
      id: parseInt(section.getAttribute('data-section-id')),
      sort_order: index + 1
    }));

    console.log('🔄 Updating section order:', orderData);

    try {
      const response = await fetch(`/api/model-gallery/${encodeURIComponent(modelSlug)}/sections/reorder`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ items: orderData })
      });

      const data = await response.json();
      console.log('📡 API Response:', data);
      
      if (data.success) {
        showSuccess('Section order updated successfully');
        console.log('✅ Section order update successful');
        // Update data attributes to reflect new order (no auto reload to avoid flicker)
        sections.forEach((section, index) => {
          section.setAttribute('data-sort-order', index + 1);
        });
      } else {
        console.error('❌ Section order update failed:', data);
        showError('Failed to update section order: ' + (data.message || 'Unknown error'));
        // Reload sections to restore original order if server rejected
        loadSections();
      }
    } catch (error) {
      console.error('Error updating section order:', error);
      showError('Failed to update section order');
      // Reload sections to restore original order
      loadSections();
    }
  }
});
</script>

